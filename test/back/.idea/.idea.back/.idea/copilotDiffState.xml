<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/DTOs/AuthDTOs.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/DTOs/AuthDTOs.cs" />
              <option name="originalContent" value="using System.ComponentModel.DataAnnotations;&#10;using Swashbuckle.AspNetCore.Annotations;&#10;&#10;namespace back.DTOs;&#10;&#10;[SwaggerSchema(&quot;Данные для входа в систему&quot;)]&#10;public class LoginDto&#10;{&#10;    [Required(ErrorMessage = &quot;Email обязателен&quot;)]&#10;    [EmailAddress(ErrorMessage = &quot;Неверный формат email&quot;)]&#10;    [SwaggerSchema(&quot;Email пользователя&quot;)]&#10;    public string Email { get; set; } = string.Empty;&#10;    &#10;    [Required(ErrorMessage = &quot;Пароль обязателен&quot;)]&#10;    [MinLength(6, ErrorMessage = &quot;Пароль должен содержать минимум 6 символов&quot;)]&#10;    [SwaggerSchema(&quot;Пароль пользователя&quot;)]&#10;    public string Password { get; set; } = string.Empty;&#10;}&#10;&#10;[SwaggerSchema(&quot;Данные для регистрации пользователя&quot;)]&#10;public class RegisterDto&#10;{&#10;    [Required(ErrorMessage = &quot;Email обязателен&quot;)]&#10;    [EmailAddress(ErrorMessage = &quot;Неверный формат email&quot;)]&#10;    [SwaggerSchema(&quot;Email пользователя&quot;)]&#10;    public string Email { get; set; } = string.Empty;&#10;    &#10;    [Required(ErrorMessage = &quot;Пароль обязателен&quot;)]&#10;    [MinLength(6, ErrorMessage = &quot;Пароль должен содержать минимум 6 символов&quot;)]&#10;    [SwaggerSchema(&quot;Пароль пользователя&quot;)]&#10;    public string Password { get; set; } = string.Empty;&#10;    &#10;    [Required(ErrorMessage = &quot;Имя обязательно&quot;)]&#10;    [SwaggerSchema(&quot;Имя пользователя&quot;)]&#10;    public string FirstName { get; set; } = string.Empty;&#10;    &#10;    [Required(ErrorMessage = &quot;Фамилия обязательна&quot;)]&#10;    [SwaggerSchema(&quot;Фамилия пользователя&quot;)]&#10;    public string LastName { get; set; } = string.Empty;&#10;    &#10;    [SwaggerSchema(&quot;Отчество пользователя&quot;)]&#10;    public string Patronymic { get; set; } = string.Empty;&#10;    &#10;    [Required(ErrorMessage = &quot;Номер телефона обязателен&quot;)]&#10;    [Phone(ErrorMessage = &quot;Неверный формат номера телефона&quot;)]&#10;    [SwaggerSchema(&quot;Номер телефона пользователя&quot;)]&#10;    public string PhoneNumber { get; set; } = string.Empty;&#10;    &#10;    [SwaggerSchema(&quot;Список идентификаторов ролей для назначения пользователю&quot;)]&#10;    public List&lt;int&gt; RoleIds { get; set; } = new();&#10;}&#10;&#10;[SwaggerSchema(&quot;Ответ с данными аутентификации&quot;)]&#10;public class AuthResponseDto&#10;{&#10;    [SwaggerSchema(&quot;JWT токен для доступа к API&quot;)]&#10;    public string Token { get; set; } = string.Empty;&#10;    &#10;    [SwaggerSchema(&quot;Email пользователя&quot;)]&#10;    public string Email { get; set; } = string.Empty;&#10;    &#10;    [SwaggerSchema(&quot;Полное имя пользователя&quot;)]&#10;    public string FullName { get; set; } = string.Empty;&#10;    &#10;    [SwaggerSchema(&quot;Список ролей пользователя&quot;)]&#10;    public List&lt;string&gt; Roles { get; set; } = new();&#10;    &#10;    [SwaggerSchema(&quot;Список разрешений пользователя&quot;)]&#10;    public List&lt;string&gt; Permissions { get; set; } = new();&#10;}&#10;&#10;[SwaggerSchema(&quot;Информация о пользователе&quot;)]&#10;public class UserDto&#10;{&#10;    [SwaggerSchema(&quot;Уникальный идентификатор пользователя&quot;)]&#10;    public Guid Id { get; set; }&#10;    &#10;    [SwaggerSchema(&quot;Email пользователя&quot;)]&#10;    public string Email { get; set; } = string.Empty;&#10;    &#10;    [SwaggerSchema(&quot;Имя пользователя&quot;)]&#10;    public string FirstName { get; set; } = string.Empty;&#10;    &#10;    [SwaggerSchema(&quot;Фамилия пользователя&quot;)]&#10;    public string LastName { get; set; } = string.Empty;&#10;    &#10;    [SwaggerSchema(&quot;Отчество пользователя&quot;)]&#10;    public string Patronymic { get; set; } = string.Empty;&#10;    &#10;    [SwaggerSchema(&quot;Номер телефона пользователя&quot;)]&#10;    public string PhoneNumber { get; set; } = string.Empty;&#10;    &#10;    [SwaggerSchema(&quot;Список ролей пользователя&quot;)]&#10;    public List&lt;string&gt; Roles { get; set; } = new();&#10;}&#10;" />
              <option name="updatedContent" value="using System.ComponentModel.DataAnnotations;&#10;&#10;namespace back.DTOs;&#10;&#10;/// &lt;summary&gt;&#10;/// Данные для входа в систему&#10;/// &lt;/summary&gt;&#10;public class LoginDto&#10;{&#10;    /// &lt;summary&gt;&#10;    /// Email пользователя&#10;    /// &lt;/summary&gt;&#10;    [Required(ErrorMessage = &quot;Email обязателен&quot;)]&#10;    [EmailAddress(ErrorMessage = &quot;Неверный формат email&quot;)]&#10;    public string Email { get; set; } = string.Empty;&#10;    &#10;    /// &lt;summary&gt;&#10;    /// Пароль пользователя&#10;    /// &lt;/summary&gt;&#10;    [Required(ErrorMessage = &quot;Пароль обязателен&quot;)]&#10;    [MinLength(6, ErrorMessage = &quot;Пароль должен содержать минимум 6 символов&quot;)]&#10;    public string Password { get; set; } = string.Empty;&#10;}&#10;&#10;/// &lt;summary&gt;&#10;/// Данные для регистрации пользователя&#10;/// &lt;/summary&gt;&#10;public class RegisterDto&#10;{&#10;    /// &lt;summary&gt;&#10;    /// Email пользователя&#10;    /// &lt;/summary&gt;&#10;    [Required(ErrorMessage = &quot;Email обязателен&quot;)]&#10;    [EmailAddress(ErrorMessage = &quot;Неверный формат email&quot;)]&#10;    public string Email { get; set; } = string.Empty;&#10;    &#10;    /// &lt;summary&gt;&#10;    /// Пароль пользователя&#10;    /// &lt;/summary&gt;&#10;    [Required(ErrorMessage = &quot;Пароль обязателен&quot;)]&#10;    [MinLength(6, ErrorMessage = &quot;Пароль должен содержать минимум 6 символов&quot;)]&#10;    public string Password { get; set; } = string.Empty;&#10;    &#10;    /// &lt;summary&gt;&#10;    /// Имя пользователя&#10;    /// &lt;/summary&gt;&#10;    [Required(ErrorMessage = &quot;Имя обязательно&quot;)]&#10;    public string FirstName { get; set; } = string.Empty;&#10;    &#10;    /// &lt;summary&gt;&#10;    /// Фамилия пользователя&#10;    /// &lt;/summary&gt;&#10;    [Required(ErrorMessage = &quot;Фамилия обязательна&quot;)]&#10;    public string LastName { get; set; } = string.Empty;&#10;    &#10;    /// &lt;summary&gt;&#10;    /// Отчество пользователя&#10;    /// &lt;/summary&gt;&#10;    public string Patronymic { get; set; } = string.Empty;&#10;    &#10;    /// &lt;summary&gt;&#10;    /// Номер телефона пользователя&#10;    /// &lt;/summary&gt;&#10;    [Required(ErrorMessage = &quot;Номер телефона обязателен&quot;)]&#10;    [Phone(ErrorMessage = &quot;Неверный формат номера телефона&quot;)]&#10;    public string PhoneNumber { get; set; } = string.Empty;&#10;    &#10;    /// &lt;summary&gt;&#10;    /// Список идентификаторов ролей для назначения пользователю&#10;    /// &lt;/summary&gt;&#10;    public List&lt;int&gt; RoleIds { get; set; } = new();&#10;}&#10;&#10;/// &lt;summary&gt;&#10;/// Ответ с данными аутентификации&#10;/// &lt;/summary&gt;&#10;public class AuthResponseDto&#10;{&#10;    /// &lt;summary&gt;&#10;    /// JWT токен для доступа к API&#10;    /// &lt;/summary&gt;&#10;    public string Token { get; set; } = string.Empty;&#10;    &#10;    /// &lt;summary&gt;&#10;    /// Email пользователя&#10;    /// &lt;/summary&gt;&#10;    public string Email { get; set; } = string.Empty;&#10;    &#10;    /// &lt;summary&gt;&#10;    /// Полное имя пользователя&#10;    /// &lt;/summary&gt;&#10;    public string FullName { get; set; } = string.Empty;&#10;    &#10;    /// &lt;summary&gt;&#10;    /// Список ролей пользователя&#10;    /// &lt;/summary&gt;&#10;    public List&lt;string&gt; Roles { get; set; } = new();&#10;    &#10;    /// &lt;summary&gt;&#10;    /// Список разрешений пользователя&#10;    /// &lt;/summary&gt;&#10;    public List&lt;string&gt; Permissions { get; set; } = new();&#10;}&#10;&#10;/// &lt;summary&gt;&#10;/// Информация о пользователе&#10;/// &lt;/summary&gt;&#10;public class UserDto&#10;{&#10;    /// &lt;summary&gt;&#10;    /// Уникальный идентификатор пользователя&#10;    /// &lt;/summary&gt;&#10;    public Guid Id { get; set; }&#10;    &#10;    /// &lt;summary&gt;&#10;    /// Email пользователя&#10;    /// &lt;/summary&gt;&#10;    public string Email { get; set; } = string.Empty;&#10;    &#10;    /// &lt;summary&gt;&#10;    /// Имя пользователя&#10;    /// &lt;/summary&gt;&#10;    public string FirstName { get; set; } = string.Empty;&#10;    &#10;    /// &lt;summary&gt;&#10;    /// Фамилия пользователя&#10;    /// &lt;/summary&gt;&#10;    public string LastName { get; set; } = string.Empty;&#10;    &#10;    /// &lt;summary&gt;&#10;    /// Отчество пользователя&#10;    /// &lt;/summary&gt;&#10;    public string Patronymic { get; set; } = string.Empty;&#10;    &#10;    /// &lt;summary&gt;&#10;    /// Номер телефона пользователя&#10;    /// &lt;/summary&gt;&#10;    public string PhoneNumber { get; set; } = string.Empty;&#10;    &#10;    /// &lt;summary&gt;&#10;    /// Список ролей пользователя&#10;    /// &lt;/summary&gt;&#10;    public List&lt;string&gt; Roles { get; set; } = new();&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Services/DataInitializerService.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Services/DataInitializerService.cs" />
              <option name="originalContent" value="using back.Models;&#10;using Microsoft.EntityFrameworkCore;&#10;&#10;namespace back.Services;&#10;&#10;public interface IDataInitializerService&#10;{&#10;    Task InitializeAsync();&#10;}&#10;&#10;public class DataInitializerService : IDataInitializerService&#10;{&#10;    private readonly ApplicationDbContext _context;&#10;    private readonly ILogger&lt;DataInitializerService&gt; _logger;&#10;&#10;    public DataInitializerService(ApplicationDbContext context, ILogger&lt;DataInitializerService&gt; logger)&#10;    {&#10;        _context = context;&#10;        _logger = logger;&#10;    }&#10;&#10;    public async Task InitializeAsync()&#10;    {&#10;        try&#10;        {&#10;            // Проверяем подключение к базе данных&#10;            await _context.Database.CanConnectAsync();&#10;            _logger.LogInformation(&quot;Начинаем инициализацию данных...&quot;);&#10;&#10;            await InitializePermissionsAsync();&#10;            await InitializeRolesAsync();&#10;            await CreateDefaultAdminAsync();&#10;&#10;            _logger.LogInformation(&quot;Инициализация данных завершена успешно&quot;);&#10;        }&#10;        catch (Exception ex)&#10;        {&#10;            _logger.LogError(ex, &quot;Ошибка при инициализации данных&quot;);&#10;            throw;&#10;        }&#10;    }&#10;&#10;    private async Task InitializePermissionsAsync()&#10;    {&#10;        var permissions = new[]&#10;        {&#10;            // Разрешения для цистерн&#10;            &quot;cisterns.read&quot;,&#10;            &quot;cisterns.create&quot;, &#10;            &quot;cisterns.update&quot;,&#10;            &quot;cisterns.delete&quot;,&#10;            &#10;            // Разрешения для пользователей&#10;            &quot;users.read&quot;,&#10;            &quot;users.create&quot;,&#10;            &quot;users.update&quot;, &#10;            &quot;users.delete&quot;,&#10;            &#10;            // Разрешения для деталей&#10;            &quot;parts.read&quot;,&#10;            &quot;parts.create&quot;,&#10;            &quot;parts.update&quot;,&#10;            &quot;parts.delete&quot;,&#10;            &#10;            // Разрешения для ремонтов&#10;            &quot;repairs.read&quot;,&#10;            &quot;repairs.create&quot;, &#10;            &quot;repairs.update&quot;,&#10;            &quot;repairs.delete&quot;,&#10;            &#10;            // Разрешения для справочников&#10;            &quot;references.read&quot;,&#10;            &quot;references.update&quot;,&#10;            &#10;            // Административные разрешения&#10;            &quot;admin.full&quot;,&#10;            &quot;admin.reports&quot;,&#10;            &quot;admin.settings&quot;&#10;        };&#10;&#10;        var existingPermissions = await _context.PermissionEntities&#10;            .Select(p =&gt; p.Name)&#10;            .ToListAsync();&#10;&#10;        foreach (var permName in permissions)&#10;        {&#10;            if (!existingPermissions.Contains(permName))&#10;            {&#10;                var newPermission = new PermissionEntity&#10;                {&#10;                    Id = await GetNextPermissionIdAsync(),&#10;                    Name = permName&#10;                };&#10;&#10;                _context.PermissionEntities.Add(newPermission);&#10;                _logger.LogInformation($&quot;Добавлено разрешение: {permName}&quot;);&#10;            }&#10;        }&#10;&#10;        await _context.SaveChangesAsync();&#10;        _context.ChangeTracker.Clear(); // Очищаем отслеживание&#10;    }&#10;&#10;    private async Task InitializeRolesAsync()&#10;    {&#10;        var rolesData = new[]&#10;        {&#10;            new &#10;            { &#10;                Name = &quot;Admin&quot;, &#10;                Permissions = new[] &#10;                { &#10;                    &quot;admin.full&quot;, &quot;users.create&quot;, &quot;users.read&quot;, &quot;users.update&quot;, &quot;users.delete&quot;,&#10;                    &quot;cisterns.read&quot;, &quot;cisterns.create&quot;, &quot;cisterns.update&quot;, &quot;cisterns.delete&quot;,&#10;                    &quot;parts.read&quot;, &quot;parts.create&quot;, &quot;parts.update&quot;, &quot;parts.delete&quot;,&#10;                    &quot;repairs.read&quot;, &quot;repairs.create&quot;, &quot;repairs.update&quot;, &quot;repairs.delete&quot;,&#10;                    &quot;references.read&quot;, &quot;references.update&quot;, &quot;admin.reports&quot;, &quot;admin.settings&quot;&#10;                }&#10;            },&#10;            new &#10;            { &#10;                Name = &quot;Manager&quot;, &#10;                Permissions = new[] &#10;                { &#10;                    &quot;cisterns.read&quot;, &quot;cisterns.create&quot;, &quot;cisterns.update&quot;,&#10;                    &quot;parts.read&quot;, &quot;parts.create&quot;, &quot;parts.update&quot;,&#10;                    &quot;repairs.read&quot;, &quot;repairs.create&quot;, &quot;repairs.update&quot;,&#10;                    &quot;references.read&quot;, &quot;admin.reports&quot;&#10;                }&#10;            },&#10;            new &#10;            { &#10;                Name = &quot;Operator&quot;, &#10;                Permissions = new[] &#10;                { &#10;                    &quot;cisterns.read&quot;, &quot;cisterns.update&quot;,&#10;                    &quot;parts.read&quot;, &quot;parts.update&quot;,&#10;                    &quot;repairs.read&quot;, &quot;repairs.create&quot;, &quot;repairs.update&quot;,&#10;                    &quot;references.read&quot;&#10;                }&#10;            },&#10;            new &#10;            { &#10;                Name = &quot;Viewer&quot;, &#10;                Permissions = new[] &#10;                { &#10;                    &quot;cisterns.read&quot;, &quot;parts.read&quot;, &quot;repairs.read&quot;, &quot;references.read&quot;&#10;                }&#10;            }&#10;        };&#10;&#10;        foreach (var roleData in rolesData)&#10;        {&#10;            await CreateOrUpdateRoleAsync(roleData.Name, roleData.Permissions);&#10;        }&#10;    }&#10;&#10;    private async Task CreateOrUpdateRoleAsync(string roleName, string[] permissionNames)&#10;    {&#10;        // Используем отдельный контекст для каждой роли, чтобы избежать конфликтов отслеживания&#10;        using var scope = _context.Database.BeginTransaction();&#10;        &#10;        try&#10;        {&#10;            // Проверяем существование роли&#10;            var existingRole = await _context.Roles&#10;                .FirstOrDefaultAsync(r =&gt; r.Name == roleName);&#10;&#10;            Role role;&#10;            if (existingRole == null)&#10;            {&#10;                // Создаем новую роль&#10;                role = new Role&#10;                {&#10;                    Id = await GetNextRoleIdAsync(),&#10;                    Name = roleName&#10;                };&#10;                _context.Roles.Add(role);&#10;                await _context.SaveChangesAsync();&#10;                _logger.LogInformation($&quot;Создана роль: {roleName}&quot;);&#10;            }&#10;            else&#10;            {&#10;                role = existingRole;&#10;                _logger.LogInformation($&quot;Обновляется роль: {roleName}&quot;);&#10;            }&#10;&#10;            // Очищаем существующие связи через прямое SQL&#10;            await _context.Database.ExecuteSqlRawAsync(&#10;                &quot;DELETE FROM \&quot;RolePermissions\&quot; WHERE \&quot;RoleId\&quot; = {0}&quot;, role.Id);&#10;&#10;            // Получаем ID разрешений&#10;            var permissionIds = await _context.PermissionEntities&#10;                .Where(p =&gt; permissionNames.Contains(p.Name))&#10;                .Select(p =&gt; p.Id)&#10;                .ToListAsync();&#10;&#10;            // Добавляем новые связи через прямое SQL&#10;            foreach (var permissionId in permissionIds)&#10;            {&#10;                await _context.Database.ExecuteSqlRawAsync(&#10;                    &quot;INSERT INTO \&quot;RolePermissions\&quot; (\&quot;RoleId\&quot;, \&quot;PermissionId\&quot;) VALUES ({0}, {1})&quot;,&#10;                    role.Id, permissionId);&#10;            }&#10;&#10;            await scope.CommitAsync();&#10;            _logger.LogInformation($&quot;Роль {roleName} настроена с {permissionIds.Count} разрешениями&quot;);&#10;        }&#10;        catch (Exception ex)&#10;        {&#10;            await scope.RollbackAsync();&#10;            _logger.LogError(ex, $&quot;Ошибка при создании/обновлении роли {roleName}&quot;);&#10;            throw;&#10;        }&#10;        finally&#10;        {&#10;            _context.ChangeTracker.Clear(); // Очищаем отслеживание после каждой роли&#10;        }&#10;    }&#10;&#10;    private async Task CreateDefaultAdminAsync()&#10;    {&#10;        var adminEmail = &quot;admin@sgtrans.by&quot;;&#10;        &#10;        // Проверяем существование администратора&#10;        var existingAdmin = await _context.Users&#10;            .FirstOrDefaultAsync(u =&gt; u.Email == adminEmail);&#10;&#10;        if (existingAdmin == null)&#10;        {&#10;            // Получаем роль Admin&#10;            var adminRole = await _context.Roles&#10;                .FirstOrDefaultAsync(r =&gt; r.Name == &quot;Admin&quot;);&#10;&#10;            if (adminRole != null)&#10;            {&#10;                var adminUser = new User&#10;                {&#10;                    Id = Guid.NewGuid(),&#10;                    Email = adminEmail,&#10;                    FirstName = &quot;Администратор&quot;,&#10;                    LastName = &quot;Системы&quot;,&#10;                    Patronymic = &quot;&quot;,&#10;                    PhoneNumber = &quot;+375000000000&quot;,&#10;                    PasswordHash = BCrypt.Net.BCrypt.HashPassword(&quot;Admin123!&quot;)&#10;                };&#10;&#10;                _context.Users.Add(adminUser);&#10;                await _context.SaveChangesAsync();&#10;&#10;                // Добавляем связь пользователь-роль через прямое SQL&#10;                await _context.Database.ExecuteSqlRawAsync(&#10;                    &quot;INSERT INTO \&quot;UserRole\&quot; (\&quot;UserId\&quot;, \&quot;RoleId\&quot;) VALUES ({0}, {1})&quot;,&#10;                    adminUser.Id, adminRole.Id);&#10;&#10;                _logger.LogInformation($&quot;Создан администратор по умолчанию: {adminEmail}&quot;);&#10;                _logger.LogWarning(&quot;ВАЖНО: Смените пароль администратора по умолчанию (Admin123!)&quot;);&#10;            }&#10;            else&#10;            {&#10;                _logger.LogWarning(&quot;Роль Admin не найдена, администратор не создан&quot;);&#10;            }&#10;        }&#10;        else&#10;        {&#10;            _logger.LogInformation($&quot;Администратор {adminEmail} уже существует&quot;);&#10;        }&#10;&#10;        _context.ChangeTracker.Clear();&#10;    }&#10;&#10;    private async Task&lt;int&gt; GetNextPermissionIdAsync()&#10;    {&#10;        var maxId = await _context.PermissionEntities.MaxAsync(p =&gt; (int?)p.Id) ?? 0;&#10;        return maxId + 1;&#10;    }&#10;&#10;    private async Task&lt;int&gt; GetNextRoleIdAsync()&#10;    {&#10;        var maxId = await _context.Roles.MaxAsync(r =&gt; (int?)r.Id) ?? 0;&#10;        return maxId + 1;&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="using back.Models;&#10;using Microsoft.EntityFrameworkCore;&#10;&#10;namespace back.Services;&#10;&#10;public interface IDataInitializerService&#10;{&#10;    Task InitializeAsync();&#10;}&#10;&#10;public class DataInitializerService : IDataInitializerService&#10;{&#10;    private readonly ApplicationDbContext _context;&#10;    private readonly ILogger&lt;DataInitializerService&gt; _logger;&#10;&#10;    public DataInitializerService(ApplicationDbContext context, ILogger&lt;DataInitializerService&gt; logger)&#10;    {&#10;        _context = context;&#10;        _logger = logger;&#10;    }&#10;&#10;    public async Task InitializeAsync()&#10;    {&#10;        try&#10;        {&#10;            // Проверяем подключение к базе данных&#10;            await _context.Database.CanConnectAsync();&#10;            _logger.LogInformation(&quot;Начинаем инициализацию данных...&quot;);&#10;&#10;            await InitializePermissionsAsync();&#10;            await InitializeRolesAsync();&#10;            await CreateDefaultAdminAsync();&#10;&#10;            _logger.LogInformation(&quot;Инициализация данных завершена успешно&quot;);&#10;        }&#10;        catch (Exception ex)&#10;        {&#10;            _logger.LogError(ex, &quot;Ошибка при инициализации данных&quot;);&#10;            throw;&#10;        }&#10;    }&#10;&#10;    private async Task InitializePermissionsAsync()&#10;    {&#10;        var permissions = new[]&#10;        {&#10;            // Разрешения для цистерн&#10;            &quot;cisterns.read&quot;,&#10;            &quot;cisterns.create&quot;, &#10;            &quot;cisterns.update&quot;,&#10;            &quot;cisterns.delete&quot;,&#10;            &#10;            // Разрешения для пользователей&#10;            &quot;users.read&quot;,&#10;            &quot;users.create&quot;,&#10;            &quot;users.update&quot;, &#10;            &quot;users.delete&quot;,&#10;            &#10;            // Разрешения для деталей&#10;            &quot;parts.read&quot;,&#10;            &quot;parts.create&quot;,&#10;            &quot;parts.update&quot;,&#10;            &quot;parts.delete&quot;,&#10;            &#10;            // Разрешения для ремонтов&#10;            &quot;repairs.read&quot;,&#10;            &quot;repairs.create&quot;, &#10;            &quot;repairs.update&quot;,&#10;            &quot;repairs.delete&quot;,&#10;            &#10;            // Разрешения для справочников&#10;            &quot;references.read&quot;,&#10;            &quot;references.update&quot;,&#10;            &#10;            // Административные разрешения&#10;            &quot;admin.full&quot;,&#10;            &quot;admin.reports&quot;,&#10;            &quot;admin.settings&quot;&#10;        };&#10;&#10;        // Используем AsNoTracking для избежания конфликтов отслеживания&#10;        var existingPermissions = await _context.PermissionEntities&#10;            .AsNoTracking()&#10;            .Select(p =&gt; p.Name)&#10;            .ToListAsync();&#10;&#10;        var newPermissions = new List&lt;PermissionEntity&gt;();&#10;        &#10;        foreach (var permName in permissions)&#10;        {&#10;            if (!existingPermissions.Contains(permName))&#10;            {&#10;                var newPermission = new PermissionEntity&#10;                {&#10;                    // Убираем ручное назначение ID - пусть база данных сама генерирует&#10;                    Name = permName&#10;                };&#10;&#10;                newPermissions.Add(newPermission);&#10;                _logger.LogInformation($&quot;Будет добавлено разрешение: {permName}&quot;);&#10;            }&#10;        }&#10;&#10;        if (newPermissions.Any())&#10;        {&#10;            _context.PermissionEntities.AddRange(newPermissions);&#10;            await _context.SaveChangesAsync();&#10;            _logger.LogInformation($&quot;Добавлено {newPermissions.Count} новых разрешений&quot;);&#10;        }&#10;&#10;        // Очищаем отслеживание после сохранения&#10;        _context.ChangeTracker.Clear();&#10;    }&#10;&#10;    private async Task InitializeRolesAsync()&#10;    {&#10;        var rolesData = new[]&#10;        {&#10;            new &#10;            { &#10;                Name = &quot;Admin&quot;, &#10;                Permissions = new[] &#10;                { &#10;                    &quot;admin.full&quot;, &quot;users.create&quot;, &quot;users.read&quot;, &quot;users.update&quot;, &quot;users.delete&quot;,&#10;                    &quot;cisterns.read&quot;, &quot;cisterns.create&quot;, &quot;cisterns.update&quot;, &quot;cisterns.delete&quot;,&#10;                    &quot;parts.read&quot;, &quot;parts.create&quot;, &quot;parts.update&quot;, &quot;parts.delete&quot;,&#10;                    &quot;repairs.read&quot;, &quot;repairs.create&quot;, &quot;repairs.update&quot;, &quot;repairs.delete&quot;,&#10;                    &quot;references.read&quot;, &quot;references.update&quot;, &quot;admin.reports&quot;, &quot;admin.settings&quot;&#10;                }&#10;            },&#10;            new &#10;            { &#10;                Name = &quot;Manager&quot;, &#10;                Permissions = new[] &#10;                { &#10;                    &quot;cisterns.read&quot;, &quot;cisterns.create&quot;, &quot;cisterns.update&quot;,&#10;                    &quot;parts.read&quot;, &quot;parts.create&quot;, &quot;parts.update&quot;,&#10;                    &quot;repairs.read&quot;, &quot;repairs.create&quot;, &quot;repairs.update&quot;,&#10;                    &quot;references.read&quot;, &quot;admin.reports&quot;&#10;                }&#10;            },&#10;            new &#10;            { &#10;                Name = &quot;Operator&quot;, &#10;                Permissions = new[] &#10;                { &#10;                    &quot;cisterns.read&quot;, &quot;cisterns.update&quot;,&#10;                    &quot;parts.read&quot;, &quot;parts.update&quot;,&#10;                    &quot;repairs.read&quot;, &quot;repairs.create&quot;, &quot;repairs.update&quot;,&#10;                    &quot;references.read&quot;&#10;                }&#10;            },&#10;            new &#10;            { &#10;                Name = &quot;Viewer&quot;, &#10;                Permissions = new[] &#10;                { &#10;                    &quot;cisterns.read&quot;, &quot;parts.read&quot;, &quot;repairs.read&quot;, &quot;references.read&quot;&#10;                }&#10;            }&#10;        };&#10;&#10;        foreach (var roleData in rolesData)&#10;        {&#10;            await CreateOrUpdateRoleAsync(roleData.Name, roleData.Permissions);&#10;        }&#10;    }&#10;&#10;    private async Task CreateOrUpdateRoleAsync(string roleName, string[] permissionNames)&#10;    {&#10;        // Очищаем отслеживание перед началом работы с ролью&#10;        _context.ChangeTracker.Clear();&#10;        &#10;        try&#10;        {&#10;            // Проверяем существование роли без отслеживания&#10;            var existingRole = await _context.Roles&#10;                .AsNoTracking()&#10;                .FirstOrDefaultAsync(r =&gt; r.Name == roleName);&#10;&#10;            Role role;&#10;            if (existingRole == null)&#10;            {&#10;                // Создаем новую роль без ручного назначения ID&#10;                role = new Role&#10;                {&#10;                    Name = roleName&#10;                };&#10;                _context.Roles.Add(role);&#10;                await _context.SaveChangesAsync();&#10;                _logger.LogInformation($&quot;Создана роль: {roleName}&quot;);&#10;            }&#10;            else&#10;            {&#10;                // Получаем роль для отслеживания&#10;                role = await _context.Roles.FindAsync(existingRole.Id);&#10;                _logger.LogInformation($&quot;Обновляется роль: {roleName}&quot;);&#10;            }&#10;&#10;            if (role == null)&#10;            {&#10;                _logger.LogError($&quot;Не удалось получить роль {roleName}&quot;);&#10;                return;&#10;            }&#10;&#10;            // Получаем все разрешения без отслеживания&#10;            var allPermissions = await _context.PermissionEntities&#10;                .AsNoTracking()&#10;                .Where(p =&gt; permissionNames.Contains(p.Name))&#10;                .ToListAsync();&#10;&#10;            if (allPermissions.Count != permissionNames.Length)&#10;            {&#10;                var foundNames = allPermissions.Select(p =&gt; p.Name).ToArray();&#10;                var missingPermissions = permissionNames.Except(foundNames).ToArray();&#10;                _logger.LogWarning($&quot;Не найдены разрешения для роли {roleName}: {string.Join(&quot;, &quot;, missingPermissions)}&quot;);&#10;            }&#10;&#10;            // Загружаем существующие разрешения для роли&#10;            await _context.Entry(role)&#10;                .Collection(r =&gt; r.Permissions)&#10;                .LoadAsync();&#10;&#10;            // Очищаем существующие разрешения&#10;            role.Permissions.Clear();&#10;&#10;            // Добавляем новые разрешения&#10;            foreach (var permission in allPermissions)&#10;            {&#10;                // Получаем отслеживаемую версию разрешения&#10;                var trackedPermission = await _context.PermissionEntities.FindAsync(permission.Id);&#10;                if (trackedPermission != null)&#10;                {&#10;                    role.Permissions.Add(trackedPermission);&#10;                }&#10;            }&#10;&#10;            await _context.SaveChangesAsync();&#10;            _logger.LogInformation($&quot;Роль {roleName} настроена с {role.Permissions.Count} разрешениями&quot;);&#10;        }&#10;        catch (Exception ex)&#10;        {&#10;            _logger.LogError(ex, $&quot;Ошибка при создании/обновлении роли {roleName}&quot;);&#10;            throw;&#10;        }&#10;        finally&#10;        {&#10;            // Очищаем отслеживание после завершения работы с ролью&#10;            _context.ChangeTracker.Clear();&#10;        }&#10;    }&#10;&#10;    private async Task CreateDefaultAdminAsync()&#10;    {&#10;        var adminEmail = &quot;admin@sgtrans.by&quot;;&#10;        &#10;        // Очищаем отслеживание перед началом&#10;        _context.ChangeTracker.Clear();&#10;        &#10;        // Проверяем существование администратора без отслеживания&#10;        var existingAdmin = await _context.Users&#10;            .AsNoTracking()&#10;            .FirstOrDefaultAsync(u =&gt; u.Email == adminEmail);&#10;&#10;        if (existingAdmin == null)&#10;        {&#10;            // Получаем роль Admin без отслеживания&#10;            var adminRole = await _context.Roles&#10;                .AsNoTracking()&#10;                .FirstOrDefaultAsync(r =&gt; r.Name == &quot;Admin&quot;);&#10;&#10;            if (adminRole != null)&#10;            {&#10;                var adminUser = new User&#10;                {&#10;                    Id = Guid.NewGuid(),&#10;                    Email = adminEmail,&#10;                    FirstName = &quot;Администратор&quot;,&#10;                    LastName = &quot;Системы&quot;,&#10;                    Patronymic = &quot;&quot;,&#10;                    PhoneNumber = &quot;+375000000000&quot;,&#10;                    PasswordHash = BCrypt.Net.BCrypt.HashPassword(&quot;Admin123!&quot;)&#10;                };&#10;&#10;                _context.Users.Add(adminUser);&#10;                await _context.SaveChangesAsync();&#10;&#10;                // Получаем отслеживаемые версии для связи&#10;                var trackedUser = await _context.Users.FindAsync(adminUser.Id);&#10;                var trackedRole = await _context.Roles.FindAsync(adminRole.Id);&#10;&#10;                if (trackedUser != null &amp;&amp; trackedRole != null)&#10;                {&#10;                    // Загружаем коллекцию ролей пользователя&#10;                    await _context.Entry(trackedUser)&#10;                        .Collection(u =&gt; u.Roles)&#10;                        .LoadAsync();&#10;&#10;                    trackedUser.Roles.Add(trackedRole);&#10;                    await _context.SaveChangesAsync();&#10;                }&#10;&#10;                _logger.LogInformation($&quot;Создан администратор по умолчанию: {adminEmail}&quot;);&#10;                _logger.LogWarning(&quot;ВАЖНО: Смените пароль администратора по умолчанию (Admin123!)&quot;);&#10;            }&#10;            else&#10;            {&#10;                _logger.LogWarning(&quot;Роль Admin не найдена, администратор не создан&quot;);&#10;            }&#10;        }&#10;        else&#10;        {&#10;            _logger.LogInformation($&quot;Администратор {adminEmail} уже существует&quot;);&#10;        }&#10;&#10;        // Финальная очистка отслеживания&#10;        _context.ChangeTracker.Clear();&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/appsettings.json">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/appsettings.json" />
              <option name="originalContent" value="{&#10;  &quot;ConnectionStrings&quot;: {&#10;    &quot;DefaultConnection&quot;: &quot;Host=46.216.223.61;Port=5432;Database=db;Username=postgres;Password=admin&quot;&#10;  },&#10;  &quot;Logging&quot;: {&#10;    &quot;LogLevel&quot;: {&#10;      &quot;Default&quot;: &quot;Information&quot;,&#10;      &quot;Microsoft.AspNetCore&quot;: &quot;Warning&quot;&#10;    }&#10;  },&#10;  &quot;AllowedHosts&quot;: &quot;*&quot;&#10;}&#10;" />
              <option name="updatedContent" value="{&#10;  &quot;ConnectionStrings&quot;: {&#10;    &quot;DefaultConnection&quot;: &quot;Host=46.216.223.61;Port=5432;Database=db;Username=postgres;Password=admin&quot;&#10;  },&#10;  &quot;JwtSettings&quot;: {&#10;    &quot;SecretKey&quot;: &quot;your-super-secret-jwt-key-that-should-be-at-least-256-bits-long&quot;,&#10;    &quot;Issuer&quot;: &quot;SgTransBackend&quot;,&#10;    &quot;Audience&quot;: &quot;SgTransFrontend&quot;,&#10;    &quot;ExpirationHours&quot;: 24&#10;  },&#10;  &quot;Logging&quot;: {&#10;    &quot;LogLevel&quot;: {&#10;      &quot;Default&quot;: &quot;Information&quot;,&#10;      &quot;Microsoft.AspNetCore&quot;: &quot;Warning&quot;&#10;    }&#10;  },&#10;  &quot;AllowedHosts&quot;: &quot;*&quot;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/back.csproj">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/back.csproj" />
              <option name="originalContent" value="&lt;Project Sdk=&quot;Microsoft.NET.Sdk.Web&quot;&gt;&#10;&#10;    &lt;PropertyGroup&gt;&#10;        &lt;TargetFramework&gt;net9.0&lt;/TargetFramework&gt;&#10;        &lt;Nullable&gt;enable&lt;/Nullable&gt;&#10;        &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt;&#10;    &lt;/PropertyGroup&gt;&#10;&#10;    &lt;ItemGroup&gt;&#10;        &lt;PackageReference Include=&quot;Microsoft.AspNetCore.OpenApi&quot; Version=&quot;9.0.7&quot;/&gt;&#10;        &lt;PackageReference Include=&quot;Microsoft.EntityFrameworkCore&quot; Version=&quot;9.0.0&quot;/&gt;&#10;        &lt;PackageReference Include=&quot;Microsoft.EntityFrameworkCore.Design&quot; Version=&quot;9.0.0&quot;/&gt;&#10;        &lt;PackageReference Include=&quot;Npgsql.EntityFrameworkCore.PostgreSQL&quot; Version=&quot;9.0.0&quot;/&gt;&#10;        &lt;PackageReference Include=&quot;Microsoft.EntityFrameworkCore.Tools&quot; Version=&quot;9.0.0&quot;/&gt;&#10;        &lt;PackageReference Include=&quot;Microsoft.AspNetCore.Authentication.JwtBearer&quot; Version=&quot;9.0.0&quot;/&gt;&#10;        &lt;PackageReference Include=&quot;System.IdentityModel.Tokens.Jwt&quot; Version=&quot;8.1.0&quot;/&gt;&#10;        &lt;PackageReference Include=&quot;BCrypt.Net-Next&quot; Version=&quot;4.0.3&quot;/&gt;&#10;        &lt;PackageReference Include=&quot;Swashbuckle.AspNetCore&quot; Version=&quot;6.8.1&quot;/&gt;&#10;    &lt;/ItemGroup&gt;&#10;&#10;&lt;/Project&gt;&#10;" />
              <option name="updatedContent" value="&lt;Project Sdk=&quot;Microsoft.NET.Sdk.Web&quot;&gt;&#10;&#10;    &lt;PropertyGroup&gt;&#10;        &lt;TargetFramework&gt;net9.0&lt;/TargetFramework&gt;&#10;        &lt;Nullable&gt;enable&lt;/Nullable&gt;&#10;        &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt;&#10;        &lt;GenerateDocumentationFile&gt;true&lt;/GenerateDocumentationFile&gt;&#10;        &lt;DocumentationFile&gt;back.xml&lt;/DocumentationFile&gt;&#10;    &lt;/PropertyGroup&gt;&#10;&#10;    &lt;ItemGroup&gt;&#10;        &lt;PackageReference Include=&quot;Microsoft.AspNetCore.OpenApi&quot; Version=&quot;9.0.7&quot;/&gt;&#10;        &lt;PackageReference Include=&quot;Microsoft.EntityFrameworkCore&quot; Version=&quot;9.0.0&quot;/&gt;&#10;        &lt;PackageReference Include=&quot;Microsoft.EntityFrameworkCore.Design&quot; Version=&quot;9.0.0&quot;/&gt;&#10;        &lt;PackageReference Include=&quot;Npgsql.EntityFrameworkCore.PostgreSQL&quot; Version=&quot;9.0.0&quot;/&gt;&#10;        &lt;PackageReference Include=&quot;Microsoft.EntityFrameworkCore.Tools&quot; Version=&quot;9.0.0&quot;/&gt;&#10;        &lt;PackageReference Include=&quot;Microsoft.AspNetCore.Authentication.JwtBearer&quot; Version=&quot;9.0.0&quot;/&gt;&#10;        &lt;PackageReference Include=&quot;System.IdentityModel.Tokens.Jwt&quot; Version=&quot;8.1.0&quot;/&gt;&#10;        &lt;PackageReference Include=&quot;BCrypt.Net-Next&quot; Version=&quot;4.0.3&quot;/&gt;&#10;        &lt;PackageReference Include=&quot;Swashbuckle.AspNetCore&quot; Version=&quot;6.8.1&quot;/&gt;&#10;    &lt;/ItemGroup&gt;&#10;&#10;&lt;/Project&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>