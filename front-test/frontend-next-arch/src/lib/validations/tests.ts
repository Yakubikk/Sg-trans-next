// –¢–µ—Å—Ç—ã –¥–ª—è —Å—Ö–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏–∏
// –≠—Ç–æ—Ç —Ñ–∞–π–ª –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ö–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏–∏

import { z } from "zod";
import { 
  loginSchema, 
  registerSchema
} from "./auth";
import { 
  wagonSearchSchema, 
  quickSearchSchema,
  cisternSearchSchema 
} from "./search";
import { 
  filterValueSchema, 
  saveFilterSchema
} from "./filters";

// –¢–µ—Å—Ç—ã –¥–ª—è —Å—Ö–µ–º—ã –≤—Ö–æ–¥–∞
export function testLoginSchema() {
  console.log("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ loginSchema...");
  
  // –í–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
  const validLoginData = {
    email: "user@example.com",
    password: "password123"
  };
  
  try {
    const result = loginSchema.parse(validLoginData);
    console.log("‚úÖ –í–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É:", result);
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ —Å –≤–∞–ª–∏–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏:", error);
  }
  
  // –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
  const invalidLoginData = {
    email: "invalid-email",
    password: ""
  };
  
  try {
    loginSchema.parse(invalidLoginData);
    console.error("‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É!");
  } catch (error) {
    if (error instanceof z.ZodError) {
      console.log("‚úÖ –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã:", 
        error.issues.map(issue => issue.message));
    }
  }
}

// –¢–µ—Å—Ç—ã –¥–ª—è —Å—Ö–µ–º—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
export function testRegisterSchema() {
  console.log("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ registerSchema...");
  
  // –í–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
  const validRegisterData = {
    email: "user@example.com",
    password: "StrongPass123!",
    confirmPassword: "StrongPass123!",
    firstName: "–ò–≤–∞–Ω",
    lastName: "–ò–≤–∞–Ω–æ–≤",
    patronymic: "–ò–≤–∞–Ω–æ–≤–∏—á",
    phoneNumber: "+375291234567",
    roleIds: [1, 2]
  };
  
  try {
    const result = registerSchema.parse(validRegisterData);
    console.log("‚úÖ –í–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É:", result);
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ —Å –≤–∞–ª–∏–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:", error);
  }
  
  // –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ - –ø–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç
  const invalidRegisterData = {
    email: "user@example.com",
    password: "StrongPass123!",
    confirmPassword: "DifferentPass123!",
    roleIds: [1]
  };
  
  try {
    registerSchema.parse(invalidRegisterData);
    console.error("‚ùå –î–∞–Ω–Ω—ã–µ —Å –Ω–µ—Å–æ–≤–ø–∞–¥–∞—é—â–∏–º–∏ –ø–∞—Ä–æ–ª—è–º–∏ –ø—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É!");
  } catch (error) {
    if (error instanceof z.ZodError) {
      console.log("‚úÖ –î–∞–Ω–Ω—ã–µ —Å –Ω–µ—Å–æ–≤–ø–∞–¥–∞—é—â–∏–º–∏ –ø–∞—Ä–æ–ª—è–º–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã:", 
        error.issues.map(issue => issue.message));
    }
  }
}

// –¢–µ—Å—Ç—ã –¥–ª—è —Å—Ö–µ–º –ø–æ–∏—Å–∫–∞
export function testSearchSchemas() {
  console.log("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ö–µ–º –ø–æ–∏—Å–∫–∞...");
  
  // –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –≤–∞–≥–æ–Ω–æ–≤
  try {
    const validWagonSearch = wagonSearchSchema.parse({ query: "12345678" });
    console.log("‚úÖ –ü–æ–∏—Å–∫ –≤–∞–≥–æ–Ω–æ–≤ - –≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:", validWagonSearch);
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤–∞–≥–æ–Ω–æ–≤:", error);
  }
  
  // –¢–µ—Å—Ç –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
  try {
    const validQuickSearch = quickSearchSchema.parse({ query: "  –ø–æ–∏—Å–∫  " });
    console.log("‚úÖ –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ - –≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (—Å –æ–±—Ä–µ–∑–∫–æ–π –ø—Ä–æ–±–µ–ª–æ–≤):", validQuickSearch);
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞:", error);
  }
  
  // –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ —Ü–∏—Å—Ç–µ—Ä–Ω
  try {
    const validCisternSearch = cisternSearchSchema.parse({ number: "–°–¶123456" });
    console.log("‚úÖ –ü–æ–∏—Å–∫ —Ü–∏—Å—Ç–µ—Ä–Ω - –≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:", validCisternSearch);
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ü–∏—Å—Ç–µ—Ä–Ω:", error);
  }
  
  // –¢–µ—Å—Ç —Å –ø—É—Å—Ç—ã–º –∑–∞–ø—Ä–æ—Å–æ–º
  try {
    quickSearchSchema.parse({ query: "" });
    console.error("‚ùå –ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É!");
  } catch (error) {
    if (error instanceof z.ZodError) {
      console.log("‚úÖ –ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω");
    }
  }
}

// –¢–µ—Å—Ç—ã –¥–ª—è —Å—Ö–µ–º —Ñ–∏–ª—å—Ç—Ä–æ–≤
export function testFilterSchemas() {
  console.log("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ö–µ–º —Ñ–∏–ª—å—Ç—Ä–æ–≤...");
  
  // –¢–µ—Å—Ç –≤–∞–ª–∏–¥–Ω–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞
  const validFilter = {
    column: "number",
    operator: "contains" as const,
    value: "12345",
    values: [],
    date: undefined
  };
  
  try {
    const result = filterValueSchema.parse(validFilter);
    console.log("‚úÖ –í–∞–ª–∏–¥–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É:", result);
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ —Å –≤–∞–ª–∏–¥–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–æ–º:", error);
  }
  
  // –¢–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞
  const validSaveFilter = {
    name: "–ú–æ–π —Ñ–∏–ª—å—Ç—Ä",
    filterJson: JSON.stringify([validFilter]),
    sortFieldsJson: JSON.stringify([{ field: "number", direction: "asc" }]),
    userId: "123e4567-e89b-12d3-a456-426614174000"
  };
  
  try {
    const result = saveFilterSchema.parse(validSaveFilter);
    console.log("‚úÖ –í–∞–ª–∏–¥–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ –ø—Ä–æ—à–ª–æ –ø—Ä–æ–≤–µ—Ä–∫—É:", result);
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ —Å –≤–∞–ª–∏–¥–Ω—ã–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ñ–∏–ª—å—Ç—Ä–∞:", error);
  }
  
  // –¢–µ—Å—Ç –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
  const invalidFilter = {
    column: "number",
    operator: "invalid_operator",
    value: "12345"
  };
  
  try {
    filterValueSchema.parse(invalidFilter);
    console.error("‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π –æ–ø–µ—Ä–∞—Ç–æ—Ä –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É!");
  } catch (error) {
    if (error instanceof z.ZodError) {
      console.log("‚úÖ –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π –æ–ø–µ—Ä–∞—Ç–æ—Ä –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω");
    }
  }
}

// –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
export function testPerformance() {
  console.log("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...");
  
  const testData = {
    email: "user@example.com",
    password: "password123"
  };
  
  const startTime = performance.now();
  const iterations = 10000;
  
  for (let i = 0; i < iterations; i++) {
    try {
      loginSchema.parse(testData);
    } catch {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –≤ —Ç–µ—Å—Ç–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    }
  }
  
  const endTime = performance.now();
  const duration = endTime - startTime;
  
  console.log(`‚úÖ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${iterations} –≤–∞–ª–∏–¥–∞—Ü–∏–π –∑–∞ ${duration.toFixed(2)}–º—Å 
    (${(duration / iterations).toFixed(4)}–º—Å –Ω–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—é)`);
}

// –¢–µ—Å—Ç —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
export function testTransformations() {
  console.log("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö...");
  
  // –¢–µ—Å—Ç –æ–±—Ä–µ–∑–∫–∏ –ø—Ä–æ–±–µ–ª–æ–≤
  const dataWithSpaces = {
    query: "  12345  "
  };
  
  try {
    const result = quickSearchSchema.parse(dataWithSpaces);
    console.log("‚úÖ –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è (–æ–±—Ä–µ–∑–∫–∞ –ø—Ä–æ–±–µ–ª–æ–≤):", 
      `"${dataWithSpaces.query}" -> "${result.query}"`);
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏:", error);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
export function runAllTests() {
  console.log("üß™ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –≤–∞–ª–∏–¥–∞—Ü–∏–∏...\n");
  
  testLoginSchema();
  console.log();
  
  testRegisterSchema();
  console.log();
  
  testSearchSchemas();
  console.log();
  
  testFilterSchemas();
  console.log();
  
  testTransformations();
  console.log();
  
  testPerformance();
  console.log();
  
  console.log("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!");
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Ñ–∞–π–ª–∞—Ö
const validationTests = {
  testLoginSchema,
  testRegisterSchema,
  testSearchSchemas,
  testFilterSchemas,
  testPerformance,
  testTransformations,
  runAllTests
};

export default validationTests;
