<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$APPLICATION_CONFIG_DIR$/consoles/db/10832ea4-ca22-45be-a4b1-88c44e90ce44/console_1.sql">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$APPLICATION_CONFIG_DIR$/consoles/db/10832ea4-ca22-45be-a4b1-88c44e90ce44/console_1.sql" />
              <option name="originalContent" value="create table if not exists public.&quot;SavedFilters&quot;&#10;(&#10;    &quot;Id&quot;             uuid                     not null&#10;        primary key,&#10;    &quot;Name&quot;           text                     not null,&#10;    &quot;FilterJson&quot;     text                     not null,&#10;    &quot;SortFieldsJson&quot; text                     not null,&#10;    &quot;UserId&quot;         uuid                     not null&#10;        constraint &quot;FK_SavedFilters_User_UserId&quot;&#10;            references public.&quot;Users&quot;&#10;            on delete cascade,&#10;    &quot;CreatedAt&quot;      timestamp with time zone not null,&#10;    &quot;UpdatedAt&quot;      timestamp with time zone not null&#10;);&#10;&#10;alter table public.&quot;SavedFilters&quot;&#10;    owner to postgres;&#10;&#10;" />
              <option name="updatedContent" value="-- Добавляем недостающие поля в таблицу SavedFilters&#10;ALTER TABLE public.&quot;SavedFilters&quot; &#10;ADD COLUMN IF NOT EXISTS &quot;EntityType&quot; text NOT NULL DEFAULT '';&#10;&#10;ALTER TABLE public.&quot;SavedFilters&quot; &#10;ADD COLUMN IF NOT EXISTS &quot;SelectedColumnsJson&quot; text NOT NULL DEFAULT '[]';&#10;&#10;ALTER TABLE public.&quot;SavedFilters&quot; &#10;ADD COLUMN IF NOT EXISTS &quot;IsDefault&quot; boolean NOT NULL DEFAULT false;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/DTOs/AuthDTOs.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/DTOs/AuthDTOs.cs" />
              <option name="originalContent" value="using System.ComponentModel.DataAnnotations;&#10;using Swashbuckle.AspNetCore.Annotations;&#10;&#10;namespace back.DTOs;&#10;&#10;[SwaggerSchema(&quot;Данные для входа в систему&quot;)]&#10;public class LoginDto&#10;{&#10;    [Required(ErrorMessage = &quot;Email обязателен&quot;)]&#10;    [EmailAddress(ErrorMessage = &quot;Неверный формат email&quot;)]&#10;    [SwaggerSchema(&quot;Email пользователя&quot;)]&#10;    public string Email { get; set; } = string.Empty;&#10;    &#10;    [Required(ErrorMessage = &quot;Пароль обязателен&quot;)]&#10;    [MinLength(6, ErrorMessage = &quot;Пароль должен содержать минимум 6 символов&quot;)]&#10;    [SwaggerSchema(&quot;Пароль пользователя&quot;)]&#10;    public string Password { get; set; } = string.Empty;&#10;}&#10;&#10;[SwaggerSchema(&quot;Данные для регистрации пользователя&quot;)]&#10;public class RegisterDto&#10;{&#10;    [Required(ErrorMessage = &quot;Email обязателен&quot;)]&#10;    [EmailAddress(ErrorMessage = &quot;Неверный формат email&quot;)]&#10;    [SwaggerSchema(&quot;Email пользователя&quot;)]&#10;    public string Email { get; set; } = string.Empty;&#10;    &#10;    [Required(ErrorMessage = &quot;Пароль обязателен&quot;)]&#10;    [MinLength(6, ErrorMessage = &quot;Пароль должен содержать минимум 6 символов&quot;)]&#10;    [SwaggerSchema(&quot;Пароль пользователя&quot;)]&#10;    public string Password { get; set; } = string.Empty;&#10;    &#10;    [Required(ErrorMessage = &quot;Имя обязательно&quot;)]&#10;    [SwaggerSchema(&quot;Имя пользователя&quot;)]&#10;    public string FirstName { get; set; } = string.Empty;&#10;    &#10;    [Required(ErrorMessage = &quot;Фамилия обязательна&quot;)]&#10;    [SwaggerSchema(&quot;Фамилия пользователя&quot;)]&#10;    public string LastName { get; set; } = string.Empty;&#10;    &#10;    [SwaggerSchema(&quot;Отчество пользователя&quot;)]&#10;    public string Patronymic { get; set; } = string.Empty;&#10;    &#10;    [Required(ErrorMessage = &quot;Номер телефона обязателен&quot;)]&#10;    [Phone(ErrorMessage = &quot;Неверный формат номера телефона&quot;)]&#10;    [SwaggerSchema(&quot;Номер телефона пользователя&quot;)]&#10;    public string PhoneNumber { get; set; } = string.Empty;&#10;    &#10;    [SwaggerSchema(&quot;Список идентификаторов ролей для назначения пользователю&quot;)]&#10;    public List&lt;int&gt; RoleIds { get; set; } = new();&#10;}&#10;&#10;[SwaggerSchema(&quot;Ответ с данными аутентификации&quot;)]&#10;public class AuthResponseDto&#10;{&#10;    [SwaggerSchema(&quot;JWT токен для доступа к API&quot;)]&#10;    public string Token { get; set; } = string.Empty;&#10;    &#10;    [SwaggerSchema(&quot;Email пользователя&quot;)]&#10;    public string Email { get; set; } = string.Empty;&#10;    &#10;    [SwaggerSchema(&quot;Полное имя пользователя&quot;)]&#10;    public string FullName { get; set; } = string.Empty;&#10;    &#10;    [SwaggerSchema(&quot;Список ролей пользователя&quot;)]&#10;    public List&lt;string&gt; Roles { get; set; } = new();&#10;    &#10;    [SwaggerSchema(&quot;Список разрешений пользователя&quot;)]&#10;    public List&lt;string&gt; Permissions { get; set; } = new();&#10;}&#10;&#10;[SwaggerSchema(&quot;Информация о пользователе&quot;)]&#10;public class UserDto&#10;{&#10;    [SwaggerSchema(&quot;Уникальный идентификатор пользователя&quot;)]&#10;    public Guid Id { get; set; }&#10;    &#10;    [SwaggerSchema(&quot;Email пользователя&quot;)]&#10;    public string Email { get; set; } = string.Empty;&#10;    &#10;    [SwaggerSchema(&quot;Имя пользователя&quot;)]&#10;    public string FirstName { get; set; } = string.Empty;&#10;    &#10;    [SwaggerSchema(&quot;Фамилия пользователя&quot;)]&#10;    public string LastName { get; set; } = string.Empty;&#10;    &#10;    [SwaggerSchema(&quot;Отчество пользователя&quot;)]&#10;    public string Patronymic { get; set; } = string.Empty;&#10;    &#10;    [SwaggerSchema(&quot;Номер телефона пользователя&quot;)]&#10;    public string PhoneNumber { get; set; } = string.Empty;&#10;    &#10;    [SwaggerSchema(&quot;Список ролей пользователя&quot;)]&#10;    public List&lt;string&gt; Roles { get; set; } = new();&#10;}&#10;" />
              <option name="updatedContent" value="using System.ComponentModel.DataAnnotations;&#10;&#10;namespace back.DTOs;&#10;&#10;/// &lt;summary&gt;&#10;/// Данные для входа в систему&#10;/// &lt;/summary&gt;&#10;public class LoginDto&#10;{&#10;    /// &lt;summary&gt;&#10;    /// Email пользователя&#10;    /// &lt;/summary&gt;&#10;    [Required(ErrorMessage = &quot;Email обязателен&quot;)]&#10;    [EmailAddress(ErrorMessage = &quot;Неверный формат email&quot;)]&#10;    public string Email { get; set; } = string.Empty;&#10;    &#10;    /// &lt;summary&gt;&#10;    /// Пароль пользователя&#10;    /// &lt;/summary&gt;&#10;    [Required(ErrorMessage = &quot;Пароль обязателен&quot;)]&#10;    [MinLength(6, ErrorMessage = &quot;Пароль должен содержать минимум 6 символов&quot;)]&#10;    public string Password { get; set; } = string.Empty;&#10;}&#10;&#10;/// &lt;summary&gt;&#10;/// Данные для регистрации пользователя&#10;/// &lt;/summary&gt;&#10;public class RegisterDto&#10;{&#10;    /// &lt;summary&gt;&#10;    /// Email пользователя&#10;    /// &lt;/summary&gt;&#10;    [Required(ErrorMessage = &quot;Email обязателен&quot;)]&#10;    [EmailAddress(ErrorMessage = &quot;Неверный формат email&quot;)]&#10;    public string Email { get; set; } = string.Empty;&#10;    &#10;    /// &lt;summary&gt;&#10;    /// Пароль пользователя&#10;    /// &lt;/summary&gt;&#10;    [Required(ErrorMessage = &quot;Пароль обязателен&quot;)]&#10;    [MinLength(6, ErrorMessage = &quot;Пароль должен содержать минимум 6 символов&quot;)]&#10;    public string Password { get; set; } = string.Empty;&#10;    &#10;    /// &lt;summary&gt;&#10;    /// Имя пользователя&#10;    /// &lt;/summary&gt;&#10;    [Required(ErrorMessage = &quot;Имя обязательно&quot;)]&#10;    public string FirstName { get; set; } = string.Empty;&#10;    &#10;    /// &lt;summary&gt;&#10;    /// Фамилия пользователя&#10;    /// &lt;/summary&gt;&#10;    [Required(ErrorMessage = &quot;Фамилия обязательна&quot;)]&#10;    public string LastName { get; set; } = string.Empty;&#10;    &#10;    /// &lt;summary&gt;&#10;    /// Отчество пользователя&#10;    /// &lt;/summary&gt;&#10;    public string Patronymic { get; set; } = string.Empty;&#10;    &#10;    /// &lt;summary&gt;&#10;    /// Номер телефона пользователя&#10;    /// &lt;/summary&gt;&#10;    [Required(ErrorMessage = &quot;Номер телефона обязателен&quot;)]&#10;    [Phone(ErrorMessage = &quot;Неверный формат номера телефона&quot;)]&#10;    public string PhoneNumber { get; set; } = string.Empty;&#10;    &#10;    /// &lt;summary&gt;&#10;    /// Список идентификаторов ролей для назначения пользователю&#10;    /// &lt;/summary&gt;&#10;    public List&lt;int&gt; RoleIds { get; set; } = new();&#10;}&#10;&#10;/// &lt;summary&gt;&#10;/// Ответ с данными аутентификации&#10;/// &lt;/summary&gt;&#10;public class AuthResponseDto&#10;{&#10;    /// &lt;summary&gt;&#10;    /// JWT токен для доступа к API&#10;    /// &lt;/summary&gt;&#10;    public string Token { get; set; } = string.Empty;&#10;    &#10;    /// &lt;summary&gt;&#10;    /// Email пользователя&#10;    /// &lt;/summary&gt;&#10;    public string Email { get; set; } = string.Empty;&#10;    &#10;    /// &lt;summary&gt;&#10;    /// Полное имя пользователя&#10;    /// &lt;/summary&gt;&#10;    public string FullName { get; set; } = string.Empty;&#10;    &#10;    /// &lt;summary&gt;&#10;    /// Список ролей пользователя&#10;    /// &lt;/summary&gt;&#10;    public List&lt;string&gt; Roles { get; set; } = new();&#10;    &#10;    /// &lt;summary&gt;&#10;    /// Список разрешений пользователя&#10;    /// &lt;/summary&gt;&#10;    public List&lt;string&gt; Permissions { get; set; } = new();&#10;}&#10;&#10;/// &lt;summary&gt;&#10;/// Информация о пользователе&#10;/// &lt;/summary&gt;&#10;public class UserDto&#10;{&#10;    /// &lt;summary&gt;&#10;    /// Уникальный идентификатор пользователя&#10;    /// &lt;/summary&gt;&#10;    public Guid Id { get; set; }&#10;    &#10;    /// &lt;summary&gt;&#10;    /// Email пользователя&#10;    /// &lt;/summary&gt;&#10;    public string Email { get; set; } = string.Empty;&#10;    &#10;    /// &lt;summary&gt;&#10;    /// Имя пользователя&#10;    /// &lt;/summary&gt;&#10;    public string FirstName { get; set; } = string.Empty;&#10;    &#10;    /// &lt;summary&gt;&#10;    /// Фамилия пользователя&#10;    /// &lt;/summary&gt;&#10;    public string LastName { get; set; } = string.Empty;&#10;    &#10;    /// &lt;summary&gt;&#10;    /// Отчество пользователя&#10;    /// &lt;/summary&gt;&#10;    public string Patronymic { get; set; } = string.Empty;&#10;    &#10;    /// &lt;summary&gt;&#10;    /// Номер телефона пользователя&#10;    /// &lt;/summary&gt;&#10;    public string PhoneNumber { get; set; } = string.Empty;&#10;    &#10;    /// &lt;summary&gt;&#10;    /// Список ролей пользователя&#10;    /// &lt;/summary&gt;&#10;    public List&lt;string&gt; Roles { get; set; } = new();&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/appsettings.json">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/appsettings.json" />
              <option name="originalContent" value="{&#10;  &quot;ConnectionStrings&quot;: {&#10;    &quot;DefaultConnection&quot;: &quot;Host=46.216.223.61;Port=5432;Database=db;Username=postgres;Password=admin&quot;&#10;  },&#10;  &quot;Logging&quot;: {&#10;    &quot;LogLevel&quot;: {&#10;      &quot;Default&quot;: &quot;Information&quot;,&#10;      &quot;Microsoft.AspNetCore&quot;: &quot;Warning&quot;&#10;    }&#10;  },&#10;  &quot;AllowedHosts&quot;: &quot;*&quot;&#10;}&#10;" />
              <option name="updatedContent" value="{&#10;  &quot;ConnectionStrings&quot;: {&#10;    &quot;DefaultConnection&quot;: &quot;Host=46.216.223.61;Port=5432;Database=db;Username=postgres;Password=admin&quot;&#10;  },&#10;  &quot;JwtSettings&quot;: {&#10;    &quot;SecretKey&quot;: &quot;your-super-secret-jwt-key-that-should-be-at-least-256-bits-long&quot;,&#10;    &quot;Issuer&quot;: &quot;SgTransBackend&quot;,&#10;    &quot;Audience&quot;: &quot;SgTransFrontend&quot;,&#10;    &quot;ExpirationHours&quot;: 24&#10;  },&#10;  &quot;Logging&quot;: {&#10;    &quot;LogLevel&quot;: {&#10;      &quot;Default&quot;: &quot;Information&quot;,&#10;      &quot;Microsoft.AspNetCore&quot;: &quot;Warning&quot;&#10;    }&#10;  },&#10;  &quot;AllowedHosts&quot;: &quot;*&quot;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>