// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using WebApp.Data;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250805175508_AddSavedFilters")]
    partial class AddSavedFilters
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("WebApp.Data.Entities.RailwayCisterns.Affiliation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Value");

                    b.HasKey("Id");

                    b.ToTable("Affiliations", (string)null);
                });

            modelBuilder.Entity("WebApp.Data.Entities.RailwayCisterns.Bolster", b =>
                {
                    b.Property<Guid>("PartId")
                        .HasColumnType("uuid");

                    b.Property<DateOnly?>("ExtendedUntil")
                        .HasColumnType("date");

                    b.Property<int?>("ServiceLifeYears")
                        .HasColumnType("integer");

                    b.HasKey("PartId");

                    b.ToTable("Bolsters", (string)null);
                });

            modelBuilder.Entity("WebApp.Data.Entities.RailwayCisterns.Coupler", b =>
                {
                    b.Property<Guid>("PartId")
                        .HasColumnType("uuid");

                    b.HasKey("PartId");

                    b.ToTable("Couplers", (string)null);
                });

            modelBuilder.Entity("WebApp.Data.Entities.RailwayCisterns.Depot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatorId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Location")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Depots");
                });

            modelBuilder.Entity("WebApp.Data.Entities.RailwayCisterns.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatorId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("WebApp.Data.Entities.RailwayCisterns.Manufacturer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("Code");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Country");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedAt");

                    b.Property<string>("CreatorId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("CreatorId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Name");

                    b.Property<string>("ShortName")
                        .HasColumnType("text")
                        .HasColumnName("ShortName");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedAt");

                    b.HasKey("Id");

                    b.ToTable("Manufacturers", (string)null);
                });

            modelBuilder.Entity("WebApp.Data.Entities.RailwayCisterns.MilageCistern", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid>("CisternId")
                        .HasColumnType("uuid")
                        .HasColumnName("CisternId");

                    b.Property<string>("CisternNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("CisternNumber");

                    b.Property<DateOnly>("InputDate")
                        .HasColumnType("date")
                        .HasColumnName("InputDate");

                    b.Property<int>("InputModeCode")
                        .HasColumnType("integer")
                        .HasColumnName("InputModeCode");

                    b.Property<int>("Milage")
                        .HasColumnType("integer")
                        .HasColumnName("Milage");

                    b.Property<int>("MilageNorm")
                        .HasColumnType("integer")
                        .HasColumnName("MilageNorm");

                    b.Property<DateOnly>("RepairDate")
                        .HasColumnType("date")
                        .HasColumnName("RepairDate");

                    b.Property<Guid>("RepairTypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("RepairTypeId");

                    b.HasKey("Id");

                    b.HasIndex("CisternId");

                    b.HasIndex("RepairTypeId");

                    b.ToTable("MilageCisterns", (string)null);
                });

            modelBuilder.Entity("WebApp.Data.Entities.RailwayCisterns.Owner", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Address")
                        .HasColumnType("text")
                        .HasColumnName("Address");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedAt");

                    b.Property<string>("CreatorId")
                        .HasColumnType("text")
                        .HasColumnName("CreatorId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Name");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ShortName");

                    b.Property<bool>("TreatRepairs")
                        .HasColumnType("boolean")
                        .HasColumnName("TreatRepairs");

                    b.Property<string>("UNP")
                        .HasColumnType("text")
                        .HasColumnName("UNP");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedAt");

                    b.HasKey("Id");

                    b.ToTable("Owners", (string)null);
                });

            modelBuilder.Entity("WebApp.Data.Entities.RailwayCisterns.Part", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<string>("CurrentLocation")
                        .HasColumnType("text");

                    b.Property<Guid?>("DepotId")
                        .HasColumnType("uuid");

                    b.Property<DateOnly?>("ManufactureYear")
                        .HasColumnType("date");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<Guid>("PartTypeId")
                        .HasColumnType("uuid");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<Guid>("StampNumberId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("StatusId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("DepotId");

                    b.HasIndex("PartTypeId");

                    b.HasIndex("StampNumberId");

                    b.HasIndex("StatusId");

                    b.ToTable("Parts", (string)null);
                });

            modelBuilder.Entity("WebApp.Data.Entities.RailwayCisterns.PartInstallation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("FromLocationId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("InstalledAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("InstalledBy")
                        .HasColumnType("text");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<Guid>("PartId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("RemovedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RemovedBy")
                        .HasColumnType("text");

                    b.Property<Guid>("ToLocationId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("WagonId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("FromLocationId");

                    b.HasIndex("PartId");

                    b.HasIndex("ToLocationId");

                    b.HasIndex("WagonId");

                    b.ToTable("PartInstallations");
                });

            modelBuilder.Entity("WebApp.Data.Entities.RailwayCisterns.PartStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<int>("Code")
                        .HasColumnType("integer")
                        .HasColumnName("Code");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("PartStatus", (string)null);
                });

            modelBuilder.Entity("WebApp.Data.Entities.RailwayCisterns.PartType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("Code");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("PartTypes", (string)null);
                });

            modelBuilder.Entity("WebApp.Data.Entities.RailwayCisterns.RailwayCistern", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid>("AffiliationId")
                        .HasColumnType("uuid")
                        .HasColumnName("AffiliationId");

                    b.Property<int>("AxleCount")
                        .HasColumnType("integer")
                        .HasColumnName("AxleCount");

                    b.Property<DateOnly>("BuildDate")
                        .HasColumnType("date")
                        .HasColumnName("BuildDate");

                    b.Property<DateOnly?>("CommissioningDate")
                        .HasColumnType("date")
                        .HasColumnName("CommissioningDate");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedAt");

                    b.Property<string>("CreatorId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("CreatorId");

                    b.Property<int>("DangerClass")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("DangerClass");

                    b.Property<decimal?>("FillingVolume")
                        .HasColumnType("numeric")
                        .HasColumnName("FillingVolume");

                    b.Property<decimal?>("InitialTareWeight")
                        .HasColumnType("numeric")
                        .HasColumnName("InitialTareWeight");

                    b.Property<int>("Length")
                        .HasColumnType("integer")
                        .HasColumnName("Length");

                    b.Property<decimal>("LoadCapacity")
                        .HasColumnType("numeric")
                        .HasColumnName("LoadCapacity");

                    b.Property<Guid>("ManufacturerId")
                        .HasColumnType("uuid")
                        .HasColumnName("ManufacturerId");

                    b.Property<Guid?>("ModelId")
                        .HasColumnType("uuid")
                        .HasColumnName("ModelId");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("Notes");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Number");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("Ownerid");

                    b.Property<DateOnly?>("PeriodDepotRepair")
                        .HasColumnType("date")
                        .HasColumnName("PeriodDepotRepair");

                    b.Property<DateOnly?>("PeriodIntermediateTest")
                        .HasColumnType("date")
                        .HasColumnName("PeriodIntermediateTest");

                    b.Property<DateOnly?>("PeriodMajorRepair")
                        .HasColumnType("date")
                        .HasColumnName("PeriodMajorRepair");

                    b.Property<DateOnly?>("PeriodPeriodicTest")
                        .HasColumnType("date")
                        .HasColumnName("PeriodPeriodicTest");

                    b.Property<decimal>("Pressure")
                        .HasColumnType("numeric")
                        .HasColumnName("Pressure");

                    b.Property<string>("Pripiska")
                        .HasColumnType("text")
                        .HasColumnName("Pripiska");

                    b.Property<DateOnly?>("ReRegistrationDate")
                        .HasColumnType("date")
                        .HasColumnName("ReRegistrationDate");

                    b.Property<Guid?>("RegistrarId")
                        .HasColumnType("uuid")
                        .HasColumnName("RegistrarId");

                    b.Property<DateOnly>("RegistrationDate")
                        .HasColumnType("date")
                        .HasColumnName("RegistrationDate");

                    b.Property<string>("RegistrationNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("RegistrationNumber");

                    b.Property<string>("Rent")
                        .HasColumnType("text")
                        .HasColumnName("Rent");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("SerialNumber");

                    b.Property<int>("ServiceLifeYears")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(40)
                        .HasColumnName("ServiceLifeYears");

                    b.Property<string>("Substance")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("СУГ")
                        .HasColumnName("Substance");

                    b.Property<decimal>("TareWeight")
                        .HasColumnType("numeric")
                        .HasColumnName("TareWeight");

                    b.Property<decimal>("TareWeight2")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric")
                        .HasDefaultValue(0m)
                        .HasColumnName("TareWeight2");

                    b.Property<decimal>("TareWeight3")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric")
                        .HasDefaultValue(0m)
                        .HasColumnName("TareWeight3");

                    b.Property<string>("TechConditions")
                        .HasColumnType("text")
                        .HasColumnName("TechСonditions");

                    b.Property<decimal>("TestPressure")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric")
                        .HasDefaultValue(0m)
                        .HasColumnName("TestPressure");

                    b.Property<Guid>("TypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("TypeId");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedAt");

                    b.Property<decimal>("Volume")
                        .HasColumnType("numeric")
                        .HasColumnName("Volume");

                    b.HasKey("Id");

                    b.HasIndex("AffiliationId");

                    b.HasIndex("ManufacturerId");

                    b.HasIndex("ModelId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("RegistrarId");

                    b.HasIndex("TypeId");

                    b.ToTable("RailwayCisterns", (string)null);
                });

            modelBuilder.Entity("WebApp.Data.Entities.RailwayCisterns.Registrar", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Registrars");
                });

            modelBuilder.Entity("WebApp.Data.Entities.RailwayCisterns.Repair", b =>
                {
                    b.Property<Guid>("RepairId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DepotId")
                        .HasColumnType("uuid");

                    b.Property<DateOnly?>("NextRepairDate")
                        .HasColumnType("date");

                    b.Property<Guid>("PartId")
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("RepairDate")
                        .HasColumnType("date");

                    b.Property<Guid>("RepairTypeId")
                        .HasColumnType("uuid");

                    b.HasKey("RepairId");

                    b.HasIndex("DepotId");

                    b.HasIndex("PartId");

                    b.HasIndex("RepairTypeId");

                    b.ToTable("Repairs");
                });

            modelBuilder.Entity("WebApp.Data.Entities.RailwayCisterns.RepairType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Code");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedAt");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("RepairTypes", (string)null);
                });

            modelBuilder.Entity("WebApp.Data.Entities.RailwayCisterns.SavedFilter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FilterJson")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SortFieldsJson")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("SavedFilters", (string)null);
                });

            modelBuilder.Entity("WebApp.Data.Entities.RailwayCisterns.ShockAbsorber", b =>
                {
                    b.Property<Guid>("PartId")
                        .HasColumnType("uuid");

                    b.Property<string>("ManufacturerCode")
                        .HasColumnType("text");

                    b.Property<string>("Model")
                        .HasColumnType("text");

                    b.Property<DateOnly?>("NextRepairDate")
                        .HasColumnType("date");

                    b.Property<int?>("ServiceLifeYears")
                        .HasColumnType("integer");

                    b.HasKey("PartId");

                    b.ToTable("ShockAbsorbers", (string)null);
                });

            modelBuilder.Entity("WebApp.Data.Entities.RailwayCisterns.SideFrame", b =>
                {
                    b.Property<Guid>("PartId")
                        .HasColumnType("uuid");

                    b.Property<DateOnly?>("ExtendedUntil")
                        .HasColumnType("date");

                    b.Property<int?>("ServiceLifeYears")
                        .HasColumnType("integer");

                    b.HasKey("PartId");

                    b.ToTable("SideFrames", (string)null);
                });

            modelBuilder.Entity("WebApp.Data.Entities.RailwayCisterns.StampNumber", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Value");

                    b.HasKey("Id");

                    b.ToTable("StampNumbers", (string)null);
                });

            modelBuilder.Entity("WebApp.Data.Entities.RailwayCisterns.Vessel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("RailwayCisternId")
                        .HasColumnType("uuid");

                    b.Property<DateOnly?>("VesselBuildDate")
                        .HasColumnType("date");

                    b.Property<string>("VesselSerialNumber")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RailwayCisternId");

                    b.ToTable("Vessels");
                });

            modelBuilder.Entity("WebApp.Data.Entities.RailwayCisterns.WagonModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("WagonModels");
                });

            modelBuilder.Entity("WebApp.Data.Entities.RailwayCisterns.WagonType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Name");

                    b.Property<string>("Type")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("0")
                        .HasColumnName("Type");

                    b.HasKey("Id");

                    b.ToTable("WagonTypes", (string)null);
                });

            modelBuilder.Entity("WebApp.Data.Entities.RailwayCisterns.WheelPair", b =>
                {
                    b.Property<Guid>("PartId")
                        .HasColumnType("uuid");

                    b.Property<decimal?>("ThicknessLeft")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("ThicknessRight")
                        .HasColumnType("numeric");

                    b.Property<string>("WheelType")
                        .HasColumnType("text");

                    b.HasKey("PartId");

                    b.ToTable("WheelPairs", (string)null);
                });

            modelBuilder.Entity("WebApp.Data.Entities.Users.PermissionEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("PermissionEntity");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Read"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Create"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Update"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Delete"
                        });
                });

            modelBuilder.Entity("WebApp.Data.Entities.Users.RoleEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            Name = "User"
                        });
                });

            modelBuilder.Entity("WebApp.Data.Entities.Users.RolePermission", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<int>("PermissionId")
                        .HasColumnType("integer");

                    b.HasKey("RoleId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("RolePermissions");
                });

            modelBuilder.Entity("WebApp.Data.Entities.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Patronymic")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text");

                    b.Property<DateTime?>("RefreshTokenExpiry")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("WebApp.Data.Entities.Users.UserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRole");
                });

            modelBuilder.Entity("WebApp.Data.Entities.RailwayCisterns.Bolster", b =>
                {
                    b.HasOne("WebApp.Data.Entities.RailwayCisterns.Part", "Part")
                        .WithOne("Bolster")
                        .HasForeignKey("WebApp.Data.Entities.RailwayCisterns.Bolster", "PartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Part");
                });

            modelBuilder.Entity("WebApp.Data.Entities.RailwayCisterns.Coupler", b =>
                {
                    b.HasOne("WebApp.Data.Entities.RailwayCisterns.Part", "Part")
                        .WithOne("Coupler")
                        .HasForeignKey("WebApp.Data.Entities.RailwayCisterns.Coupler", "PartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Part");
                });

            modelBuilder.Entity("WebApp.Data.Entities.RailwayCisterns.MilageCistern", b =>
                {
                    b.HasOne("WebApp.Data.Entities.RailwayCisterns.RailwayCistern", "Cistern")
                        .WithMany("MilageCisterns")
                        .HasForeignKey("CisternId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_CisternId_RailwayCisterns_id");

                    b.HasOne("WebApp.Data.Entities.RailwayCisterns.RepairType", "RepairType")
                        .WithMany("MilageCisterns")
                        .HasForeignKey("RepairTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_RepairTypeId_RepairTypes_id");

                    b.Navigation("Cistern");

                    b.Navigation("RepairType");
                });

            modelBuilder.Entity("WebApp.Data.Entities.RailwayCisterns.Part", b =>
                {
                    b.HasOne("WebApp.Data.Entities.RailwayCisterns.Depot", "Depot")
                        .WithMany("Parts")
                        .HasForeignKey("DepotId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("WebApp.Data.Entities.RailwayCisterns.PartType", "PartType")
                        .WithMany()
                        .HasForeignKey("PartTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WebApp.Data.Entities.RailwayCisterns.StampNumber", "StampNumber")
                        .WithMany()
                        .HasForeignKey("StampNumberId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WebApp.Data.Entities.RailwayCisterns.PartStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Depot");

                    b.Navigation("PartType");

                    b.Navigation("StampNumber");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("WebApp.Data.Entities.RailwayCisterns.PartInstallation", b =>
                {
                    b.HasOne("WebApp.Data.Entities.RailwayCisterns.Location", "FromLocation")
                        .WithMany("FromInstallations")
                        .HasForeignKey("FromLocationId");

                    b.HasOne("WebApp.Data.Entities.RailwayCisterns.Part", "Part")
                        .WithMany("PartInstallations")
                        .HasForeignKey("PartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApp.Data.Entities.RailwayCisterns.Location", "ToLocation")
                        .WithMany("ToInstallations")
                        .HasForeignKey("ToLocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApp.Data.Entities.RailwayCisterns.RailwayCistern", "Wagon")
                        .WithMany("PartInstallations")
                        .HasForeignKey("WagonId");

                    b.Navigation("FromLocation");

                    b.Navigation("Part");

                    b.Navigation("ToLocation");

                    b.Navigation("Wagon");
                });

            modelBuilder.Entity("WebApp.Data.Entities.RailwayCisterns.RailwayCistern", b =>
                {
                    b.HasOne("WebApp.Data.Entities.RailwayCisterns.Affiliation", "Affiliation")
                        .WithMany("RailwayCisterns")
                        .HasForeignKey("AffiliationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_RailwayCisterns_Affiliations_AffiliationId");

                    b.HasOne("WebApp.Data.Entities.RailwayCisterns.Manufacturer", "Manufacturer")
                        .WithMany("RailwayCisterns")
                        .HasForeignKey("ManufacturerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_RailwayCisterns_Manufacturers_ManufacturerId");

                    b.HasOne("WebApp.Data.Entities.RailwayCisterns.WagonModel", "Model")
                        .WithMany("RailwayCisterns")
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK_RailwayCisterns_WagonModels_ModelId");

                    b.HasOne("WebApp.Data.Entities.RailwayCisterns.Owner", "Owner")
                        .WithMany("RailwayCisterns")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK_RailwayCisterns_Owners_Ownerid");

                    b.HasOne("WebApp.Data.Entities.RailwayCisterns.Registrar", "Registrar")
                        .WithMany("RailwayCisterns")
                        .HasForeignKey("RegistrarId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK_RailwayCisterns_Registrars_RegistrarId");

                    b.HasOne("WebApp.Data.Entities.RailwayCisterns.WagonType", "Type")
                        .WithMany("RailwayCisterns")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_RailwayCisterns_WagonTypes_TypeId");

                    b.Navigation("Affiliation");

                    b.Navigation("Manufacturer");

                    b.Navigation("Model");

                    b.Navigation("Owner");

                    b.Navigation("Registrar");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("WebApp.Data.Entities.RailwayCisterns.Repair", b =>
                {
                    b.HasOne("WebApp.Data.Entities.RailwayCisterns.Depot", "Depot")
                        .WithMany("Repairs")
                        .HasForeignKey("DepotId");

                    b.HasOne("WebApp.Data.Entities.RailwayCisterns.Part", "Part")
                        .WithMany("Repairs")
                        .HasForeignKey("PartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApp.Data.Entities.RailwayCisterns.RepairType", "RepairType")
                        .WithMany("Repairs")
                        .HasForeignKey("RepairTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Depot");

                    b.Navigation("Part");

                    b.Navigation("RepairType");
                });

            modelBuilder.Entity("WebApp.Data.Entities.RailwayCisterns.SavedFilter", b =>
                {
                    b.HasOne("WebApp.Data.Entities.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApp.Data.Entities.RailwayCisterns.ShockAbsorber", b =>
                {
                    b.HasOne("WebApp.Data.Entities.RailwayCisterns.Part", "Part")
                        .WithOne("ShockAbsorber")
                        .HasForeignKey("WebApp.Data.Entities.RailwayCisterns.ShockAbsorber", "PartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Part");
                });

            modelBuilder.Entity("WebApp.Data.Entities.RailwayCisterns.SideFrame", b =>
                {
                    b.HasOne("WebApp.Data.Entities.RailwayCisterns.Part", "Part")
                        .WithOne("SideFrame")
                        .HasForeignKey("WebApp.Data.Entities.RailwayCisterns.SideFrame", "PartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Part");
                });

            modelBuilder.Entity("WebApp.Data.Entities.RailwayCisterns.Vessel", b =>
                {
                    b.HasOne("WebApp.Data.Entities.RailwayCisterns.RailwayCistern", "RailwayCistern")
                        .WithMany()
                        .HasForeignKey("RailwayCisternId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RailwayCistern");
                });

            modelBuilder.Entity("WebApp.Data.Entities.RailwayCisterns.WheelPair", b =>
                {
                    b.HasOne("WebApp.Data.Entities.RailwayCisterns.Part", "Part")
                        .WithOne("WheelPair")
                        .HasForeignKey("WebApp.Data.Entities.RailwayCisterns.WheelPair", "PartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Part");
                });

            modelBuilder.Entity("WebApp.Data.Entities.Users.RolePermission", b =>
                {
                    b.HasOne("WebApp.Data.Entities.Users.PermissionEntity", null)
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApp.Data.Entities.Users.RoleEntity", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebApp.Data.Entities.Users.UserRole", b =>
                {
                    b.HasOne("WebApp.Data.Entities.Users.RoleEntity", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApp.Data.Entities.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebApp.Data.Entities.RailwayCisterns.Affiliation", b =>
                {
                    b.Navigation("RailwayCisterns");
                });

            modelBuilder.Entity("WebApp.Data.Entities.RailwayCisterns.Depot", b =>
                {
                    b.Navigation("Parts");

                    b.Navigation("Repairs");
                });

            modelBuilder.Entity("WebApp.Data.Entities.RailwayCisterns.Location", b =>
                {
                    b.Navigation("FromInstallations");

                    b.Navigation("ToInstallations");
                });

            modelBuilder.Entity("WebApp.Data.Entities.RailwayCisterns.Manufacturer", b =>
                {
                    b.Navigation("RailwayCisterns");
                });

            modelBuilder.Entity("WebApp.Data.Entities.RailwayCisterns.Owner", b =>
                {
                    b.Navigation("RailwayCisterns");
                });

            modelBuilder.Entity("WebApp.Data.Entities.RailwayCisterns.Part", b =>
                {
                    b.Navigation("Bolster");

                    b.Navigation("Coupler");

                    b.Navigation("PartInstallations");

                    b.Navigation("Repairs");

                    b.Navigation("ShockAbsorber");

                    b.Navigation("SideFrame");

                    b.Navigation("WheelPair");
                });

            modelBuilder.Entity("WebApp.Data.Entities.RailwayCisterns.RailwayCistern", b =>
                {
                    b.Navigation("MilageCisterns");

                    b.Navigation("PartInstallations");
                });

            modelBuilder.Entity("WebApp.Data.Entities.RailwayCisterns.Registrar", b =>
                {
                    b.Navigation("RailwayCisterns");
                });

            modelBuilder.Entity("WebApp.Data.Entities.RailwayCisterns.RepairType", b =>
                {
                    b.Navigation("MilageCisterns");

                    b.Navigation("Repairs");
                });

            modelBuilder.Entity("WebApp.Data.Entities.RailwayCisterns.WagonModel", b =>
                {
                    b.Navigation("RailwayCisterns");
                });

            modelBuilder.Entity("WebApp.Data.Entities.RailwayCisterns.WagonType", b =>
                {
                    b.Navigation("RailwayCisterns");
                });
#pragma warning restore 612, 618
        }
    }
}
