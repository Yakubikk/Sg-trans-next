// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Persistence;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Core.Repairs.AbsorberDevice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Code")
                        .HasColumnType("integer")
                        .HasColumnName("код");

                    b.Property<string>("Field1")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("поле1");

                    b.HasKey("Id");

                    b.ToTable("справочник_поглащаппарат");
                });

            modelBuilder.Entity("Core.Repairs.AbsorberDevice1", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Code")
                        .HasColumnType("integer")
                        .HasColumnName("код");

                    b.Property<string>("Field1")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("поле1");

                    b.HasKey("Id");

                    b.ToTable("справочник_поглащаппарат1");
                });

            modelBuilder.Entity("Core.Repairs.AbsorberDeviceAccounting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Code")
                        .HasColumnType("integer")
                        .HasColumnName("код");

                    b.Property<string>("FactoryNumber")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("заводномер");

                    b.Property<DateTime?>("InstallationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("дата установки");

                    b.Property<bool>("IsRolledOut")
                        .HasColumnType("boolean")
                        .HasColumnName("выкачен");

                    b.Property<bool>("IsWrittenOff")
                        .HasColumnType("boolean")
                        .HasColumnName("списан");

                    b.Property<int?>("StorageLocation")
                        .HasColumnType("integer")
                        .HasColumnName("хранение");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("тип");

                    b.Property<string>("WagonNumber")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("вагон");

                    b.Property<DateTime?>("Year")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("год");

                    b.HasKey("Id");

                    b.ToTable("справочник_поглащаппарат_учет");
                });

            modelBuilder.Entity("Core.Repairs.AirDistributor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Code")
                        .HasColumnType("integer")
                        .HasColumnName("код");

                    b.Property<string>("Field1")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("поле1");

                    b.HasKey("Id");

                    b.ToTable("справочник_воздухораспределители");
                });

            modelBuilder.Entity("Core.Repairs.Brake", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Code")
                        .HasColumnType("integer")
                        .HasColumnName("код");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("описание");

                    b.Property<string>("Field1")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("поле1");

                    b.HasKey("Id");

                    b.ToTable("справочник_тормоз");
                });

            modelBuilder.Entity("Core.Repairs.Cargo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CargoName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("названиегруза");

                    b.Property<int>("Code")
                        .HasColumnType("integer")
                        .HasColumnName("код");

                    b.Property<string>("Name")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("наименование");

                    b.Property<double?>("Price")
                        .HasColumnType("double precision")
                        .HasColumnName("цена");

                    b.HasKey("Id");

                    b.ToTable("справочник_груз");
                });

            modelBuilder.Entity("Core.Repairs.Client", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("adres");

                    b.Property<string>("ClientName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("klient");

                    b.Property<string>("Code")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("kod");

                    b.Property<string>("DepotCodeFromTXT")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("коддепоизтхт");

                    b.Property<int>("Number")
                        .HasColumnType("integer")
                        .HasColumnName("nomer");

                    b.Property<string>("Repair")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("remont");

                    b.Property<string>("ShortClientName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("krklient");

                    b.Property<string>("UNP")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("unp");

                    b.HasKey("Id");

                    b.ToTable("справочник_клиенты");
                });

            modelBuilder.Entity("Core.Repairs.Contract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<short?>("Associated")
                        .HasColumnType("smallint")
                        .HasColumnName("poputnoe");

                    b.Property<string>("ClientName")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("klient");

                    b.Property<string>("ContractCurrency")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("valuta dogovora");

                    b.Property<string>("ContractName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("dogovor");

                    b.Property<short?>("DailyTurnover")
                        .HasColumnType("smallint")
                        .HasColumnName("oborotsutki");

                    b.Property<short?>("FactTurnover")
                        .HasColumnType("smallint")
                        .HasColumnName("factoborot");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("deystvuet");

                    b.Property<short?>("Lease")
                        .HasColumnType("smallint")
                        .HasColumnName("arenda");

                    b.Property<int>("Number")
                        .HasColumnType("integer")
                        .HasColumnName("nomer");

                    b.Property<int?>("Penalty")
                        .HasColumnType("integer")
                        .HasColumnName("straf");

                    b.Property<string>("PenaltyCurrency")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("valutast");

                    b.Property<string>("PenaltyType")
                        .HasMaxLength(4)
                        .HasColumnType("character varying(4)")
                        .HasColumnName("tipstraf");

                    b.HasKey("Id");

                    b.ToTable("справочник_договоры");
                });

            modelBuilder.Entity("Core.Repairs.Cost", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<short?>("Days")
                        .HasColumnType("smallint")
                        .HasColumnName("сутки");

                    b.Property<int>("Number")
                        .HasColumnType("integer")
                        .HasColumnName("nomer");

                    b.Property<double?>("SellingPrice")
                        .HasColumnType("double precision")
                        .HasColumnName("отпускнаяцена");

                    b.Property<double?>("SellingPriceEuro")
                        .HasColumnType("double precision")
                        .HasColumnName("отпускнаяценаевро");

                    b.Property<double?>("SellingPriceEuro2")
                        .HasColumnType("double precision")
                        .HasColumnName("отпускнаяценаевро2");

                    b.Property<double?>("SellingPriceEuro3")
                        .HasColumnType("double precision")
                        .HasColumnName("отпускнаяценаевро3");

                    b.Property<string>("UnitOfMeasure")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("единицаизмерения");

                    b.HasKey("Id");

                    b.ToTable("справочник_стоимость");
                });

            modelBuilder.Entity("Core.Repairs.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("CountryCode")
                        .HasColumnType("integer")
                        .HasColumnName("кодстанции");

                    b.Property<string>("CountryName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("названиестраны");

                    b.HasKey("Id");

                    b.ToTable("справочник_страны");
                });

            modelBuilder.Entity("Core.Repairs.Defect", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("DefectCode")
                        .HasColumnType("integer")
                        .HasColumnName("коднеисправности");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("наименование");

                    b.Property<Guid?>("ReasonId")
                        .HasColumnType("uuid")
                        .HasColumnName("причина");

                    b.Property<string>("ShortDefect")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("сокрнеисправность");

                    b.HasKey("Id");

                    b.HasIndex("ReasonId");

                    b.ToTable("спрнеисправности");
                });

            modelBuilder.Entity("Core.Repairs.Depot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Abbreviation")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("сокр");

                    b.Property<double>("EnterpriseCode")
                        .HasColumnType("double precision")
                        .HasColumnName("кодпредприятия");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("наименование");

                    b.HasKey("Id");

                    b.ToTable("спрдепо");
                });

            modelBuilder.Entity("Core.Repairs.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("EmployeeName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("rabotnik");

                    b.Property<string>("EmployeeStationNumber")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("стном");

                    b.Property<int>("Number")
                        .HasColumnType("integer")
                        .HasColumnName("nomer");

                    b.Property<string>("Position")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("dolznost");

                    b.HasKey("Id");

                    b.ToTable("справочник_работники");
                });

            modelBuilder.Entity("Core.Repairs.EuroCost", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<short?>("Days")
                        .HasColumnType("smallint")
                        .HasColumnName("сутки");

                    b.Property<int>("Number")
                        .HasColumnType("integer")
                        .HasColumnName("nomer");

                    b.Property<double?>("SellingPrice")
                        .HasColumnType("double precision")
                        .HasColumnName("отпускнаяцена");

                    b.Property<string>("UnitOfMeasure")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("единицаизмерения");

                    b.HasKey("Id");

                    b.ToTable("справочник_стоимостьевро");
                });

            modelBuilder.Entity("Core.Repairs.Fault", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Code")
                        .HasColumnType("integer")
                        .HasColumnName("код");

                    b.Property<string>("FaultCode")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("код неисправности");

                    b.Property<string>("Note")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("примечание");

                    b.HasKey("Id");

                    b.ToTable("справочник_неисправности");
                });

            modelBuilder.Entity("Core.Repairs.GasContract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ClientName")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("klient");

                    b.Property<string>("ContractName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("dogovor");

                    b.Property<int>("Number")
                        .HasColumnType("integer")
                        .HasColumnName("nomer");

                    b.HasKey("Id");

                    b.ToTable("справочник_договоры_газ");
                });

            modelBuilder.Entity("Core.Repairs.ModelVC", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Code")
                        .HasColumnType("integer")
                        .HasColumnName("код");

                    b.Property<string>("Field1")
                        .HasMaxLength(75)
                        .HasColumnType("character varying(75)")
                        .HasColumnName("поле1");

                    b.Property<double?>("Field2")
                        .HasColumnType("double precision")
                        .HasColumnName("поле2");

                    b.Property<double?>("Field3")
                        .HasColumnType("double precision")
                        .HasColumnName("поле3");

                    b.Property<int?>("Field4")
                        .HasColumnType("integer")
                        .HasColumnName("поле4");

                    b.Property<double?>("Field5")
                        .HasColumnType("double precision")
                        .HasColumnName("поле5");

                    b.HasKey("Id");

                    b.ToTable("справочник_модельвц");
                });

            modelBuilder.Entity("Core.Repairs.Modernization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<short>("ModernizationCode")
                        .HasColumnType("smallint")
                        .HasColumnName("кодмодернизации");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("наименование");

                    b.HasKey("Id");

                    b.ToTable("спрмодернизация");
                });

            modelBuilder.Entity("Core.Repairs.Part", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<short?>("Detail")
                        .HasColumnType("smallint")
                        .HasColumnName("деталь");

                    b.Property<short>("PartCode")
                        .HasColumnType("smallint")
                        .HasColumnName("коддетали");

                    b.Property<string>("PartName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("наименованиедетали");

                    b.HasKey("Id");

                    b.ToTable("справочник_детали");
                });

            modelBuilder.Entity("Core.Repairs.Railway", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Abbreviation")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("сокр");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("наименование");

                    b.Property<double>("RailwayCode")
                        .HasColumnType("double precision")
                        .HasColumnName("коддороги");

                    b.HasKey("Id");

                    b.ToTable("спрдороги");
                });

            modelBuilder.Entity("Core.Repairs.Reason", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Code")
                        .HasColumnType("integer")
                        .HasColumnName("код");

                    b.Property<string>("ReasonName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("причина");

                    b.HasKey("Id");

                    b.ToTable("спрпричины");
                });

            modelBuilder.Entity("Core.Repairs.ReferenceStation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<short?>("AdministrationCode")
                        .HasColumnType("smallint")
                        .HasColumnName("кодадминистрации");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("наименование");

                    b.Property<int>("StationCode")
                        .HasColumnType("integer")
                        .HasColumnName("кодстанции");

                    b.HasKey("Id");

                    b.ToTable("спрстанции");
                });

            modelBuilder.Entity("Core.Repairs.Repair", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Abbreviation")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("сокр");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("наименование");

                    b.Property<short>("RepairCode")
                        .HasColumnType("smallint")
                        .HasColumnName("кодремонта");

                    b.HasKey("Id");

                    b.ToTable("спрремонты");
                });

            modelBuilder.Entity("Core.Repairs.RepairType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Code")
                        .HasColumnType("integer")
                        .HasColumnName("код");

                    b.Property<string>("Note")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("примечание");

                    b.Property<string>("RepairTypeName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("видремонта");

                    b.HasKey("Id");

                    b.ToTable("справочник_видыремонта");
                });

            modelBuilder.Entity("Core.Repairs.Stamp", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("character varying(4)")
                        .HasColumnName("тип");

                    b.HasKey("Id");

                    b.ToTable("справочник_клеймо");
                });

            modelBuilder.Entity("Core.Repairs.Station", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CountryCode")
                        .HasMaxLength(6)
                        .HasColumnType("character varying(6)")
                        .HasColumnName("страна дороги код");

                    b.Property<string>("CountryName")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("страна дороги");

                    b.Property<string>("FullName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("полноенаименование");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("действует");

                    b.Property<string>("Railway")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("дорога");

                    b.Property<string>("RailwayName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("дорога наименование");

                    b.Property<string>("RemainingOnTrackM")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("остатоквпутим");

                    b.Property<string>("RemainingOnTrackN")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("остатоквпутин");

                    b.Property<string>("RemainingOnTrackR")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("остатоквпутир");

                    b.Property<string>("RemainingOnTrackV")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("остатоквпутив");

                    b.Property<string>("StationCode")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("character varying(6)")
                        .HasColumnName("кодстанции");

                    b.Property<string>("StationName")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("названиестанции");

                    b.HasKey("Id");

                    b.ToTable("справочник_станции");
                });

            modelBuilder.Entity("Core.Repairs.VCType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Code")
                        .HasColumnType("integer")
                        .HasColumnName("код");

                    b.Property<string>("Type")
                        .HasMaxLength(4)
                        .HasColumnType("character varying(4)")
                        .HasColumnName("тип");

                    b.HasKey("Id");

                    b.ToTable("справочник_типвц");
                });

            modelBuilder.Entity("Core.Repairs.Wagon", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Assignment")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("pripiska");

                    b.Property<double?>("Capacity")
                        .HasColumnType("double precision")
                        .HasColumnName("emk_vl");

                    b.Property<string>("CarAbsorberDevice")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("carpoglapar_vl");

                    b.Property<string>("CarAbsorberDeviceAdd")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("carpoglaparadd_vl");

                    b.Property<string>("CarAirDistributor")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("carvizdyx_vl");

                    b.Property<int?>("CarAxleLoad")
                        .HasColumnType("integer")
                        .HasColumnName("carosiling_vl");

                    b.Property<double?>("CarAxles")
                        .HasColumnType("double precision")
                        .HasColumnName("carosi_vl");

                    b.Property<string>("CarBrake")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("cartorm_vl");

                    b.Property<string>("CarBrand")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("carmarka_vl");

                    b.Property<DateTime?>("CarConstructionDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("carpostr_dt");

                    b.Property<string>("CarDescription")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("car_ds");

                    b.Property<int?>("CarFactoryId")
                        .HasColumnType("integer")
                        .HasColumnName("carzav_id");

                    b.Property<string>("CarFactoryNumberId")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("carzavnom_id");

                    b.Property<string>("CarInventory")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("carinv");

                    b.Property<double?>("CarLoadCapacityVol")
                        .HasColumnType("double precision")
                        .HasColumnName("cargryz_vl");

                    b.Property<double?>("CarTareVolume")
                        .HasColumnType("double precision")
                        .HasColumnName("cartara_vl");

                    b.Property<decimal?>("CarTareWeight")
                        .HasColumnType("numeric")
                        .HasColumnName("cartar_vl");

                    b.Property<string>("CarTele")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("cartele_vl");

                    b.Property<string>("CarType")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("carty_vl");

                    b.Property<int?>("CarUser")
                        .HasColumnType("integer")
                        .HasColumnName("caruser_vl");

                    b.Property<int?>("CarUserAddNorm")
                        .HasColumnType("integer")
                        .HasColumnName("caruseraddnor_vl");

                    b.Property<DateTime?>("CarUserAddNormDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("caruseraddnor_dt");

                    b.Property<string>("CarUserAddNormId")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("caruseraddnor_id");

                    b.Property<DateTime?>("CarUserNoticeDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("carusernot_dt");

                    b.Property<DateTime?>("CarUserStartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("caruserbeg_dt");

                    b.Property<string>("CarWheelset")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("carkolpat_vl");

                    b.Property<string>("Class")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("класс");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_dt");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("create_us");

                    b.Property<DateTime?>("DataPPE")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("datappe");

                    b.Property<string>("DocAuthorId")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("docautor_id");

                    b.Property<DateTime?>("DocDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("docdate_dt");

                    b.Property<decimal?>("FillingLevel")
                        .HasColumnType("numeric")
                        .HasColumnName("napol_vl");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("deystvuet");

                    b.Property<bool>("IsLeased")
                        .HasColumnType("boolean")
                        .HasColumnName("arenda");

                    b.Property<double?>("LoadCapacity")
                        .HasColumnType("double precision")
                        .HasColumnName("gruzopodemnost");

                    b.Property<int?>("MileageNorm")
                        .HasColumnType("integer")
                        .HasColumnName("normaprobega");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_dt");

                    b.Property<string>("ModifiedUser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("modified_us");

                    b.Property<int>("Number")
                        .HasColumnType("integer")
                        .HasColumnName("nomer");

                    b.Property<double?>("OldCarTareVolume")
                        .HasColumnType("double precision")
                        .HasColumnName("cartara_vl_old");

                    b.Property<int?>("OwnerId")
                        .HasColumnType("integer")
                        .HasColumnName("vladelec");

                    b.Property<double?>("Pressure")
                        .HasColumnType("double precision")
                        .HasColumnName("давление");

                    b.Property<string>("RailwayCode")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("koddorogi");

                    b.Property<string>("RegNumber")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("regnom");

                    b.Property<DateTime?>("RegNumberDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("regnom_dt");

                    b.Property<string>("RegNumberOrg")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("regnom_org");

                    b.Property<string>("SUG")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("суг");

                    b.Property<double?>("Tare")
                        .HasColumnType("double precision")
                        .HasColumnName("tara");

                    b.Property<string>("Type")
                        .HasMaxLength(6)
                        .HasColumnType("character varying(6)")
                        .HasColumnName("tip");

                    b.Property<string>("Way")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("way");

                    b.Property<decimal?>("WeightVolume")
                        .HasColumnType("numeric")
                        .HasColumnName("ves_vl");

                    b.HasKey("Id");

                    b.ToTable("справочник_вагоны");
                });

            modelBuilder.Entity("Persistence.Entities.PermissionEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("PermissionEntity");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Read"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Create"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Update"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Delete"
                        });
                });

            modelBuilder.Entity("Persistence.Entities.RoleEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            Name = "User"
                        });
                });

            modelBuilder.Entity("Persistence.Entities.RolePermissionEntity", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<int>("PermissionId")
                        .HasColumnType("integer");

                    b.HasKey("RoleId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("RolePermissions");
                });

            modelBuilder.Entity("Persistence.Entities.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Patronymic")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text");

                    b.Property<DateTime?>("RefreshTokenExpiry")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Persistence.Entities.UserRoleEntity", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoleEntity");
                });

            modelBuilder.Entity("Core.Repairs.Defect", b =>
                {
                    b.HasOne("Core.Repairs.Reason", "Reason")
                        .WithMany("Defects")
                        .HasForeignKey("ReasonId");

                    b.Navigation("Reason");
                });

            modelBuilder.Entity("Persistence.Entities.RolePermissionEntity", b =>
                {
                    b.HasOne("Persistence.Entities.PermissionEntity", null)
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Persistence.Entities.RoleEntity", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Persistence.Entities.UserRoleEntity", b =>
                {
                    b.HasOne("Persistence.Entities.RoleEntity", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Persistence.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Repairs.Reason", b =>
                {
                    b.Navigation("Defects");
                });
#pragma warning restore 612, 618
        }
    }
}
